{"title":"Leetcode-53 Maximun Array","date":"2019-09-11T13:19:59.000Z","link":"post/Leetcode-53","tags":["动态规划"],"categories":["Leetcode"],"updated":"2019-09-11T14:43:17.519Z","content":"<h1 id=\"题目\">题目<a href=\"post/Leetcode-53#题目\"></a></h1><p>Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.</p>\n<p>Example:</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Input: [-2,1,-3,4,-1,2,1,-5,4],</span><br><span class=\"line\">Output: 6</span><br><span class=\"line\">Explanation: [4,-1,2,1] has the largest sum = 6.</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"动态规划\">动态规划<a href=\"post/Leetcode-53#动态规划\"></a></h1><p><strong>状态转移方程</strong><br>定义<code>dp[i]</code>为子序列<code>seq[:i]</code>的最大连续子列和</p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dp[i] = max(dp[i - 1] + seq[i], seq[i])</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>实现</strong></p>\n<figure class=\"highlight java\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">maxSubArray</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 记录最大和</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> max = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\">        <span class=\"keyword\">int</span>[] dp = <span class=\"keyword\">new</span> <span class=\"keyword\">int</span>[nums.length];</span><br><span class=\"line\">        dp[<span class=\"number\">0</span>] = nums[<span class=\"number\">0</span>];</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">1</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">            dp[i] = Math.max(dp[i - <span class=\"number\">1</span>] + nums[i], nums[i]);</span><br><span class=\"line\">            max = Math.max(dp[i], max);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> max;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></div></figure>","next":{"title":"MIPS-Like单周期16位CPU设计","link":"post/MIPS-Like单周期CPU设计"},"plink":"https://beginc.github.io/post/Leetcode-53/","toc":[{"title":"题目","id":"题目","index":"1"},{"title":"动态规划","id":"动态规划","index":"2"}]}