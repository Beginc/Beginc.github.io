{"title":"Java反射","date":"2019-08-28T12:32:12.000Z","date_formatted":{"ll":"Aug 28, 2019","L":"08/28/2019","MM-DD":"08-28"},"thumbnail":"post/Java/Java语言/Java反射/cover.jpg","link":"post/Java/Java语言/Java反射","categories":["Java","Java语言"],"updated":"2020-01-08T08:31:06.570Z","content":"<h1 id=\"class与反射\">Class与反射<a href=\"#class与反射\" title=\"Class与反射\"></a></h1><p> Java除了基本类型外都是class，class是由JVM在执行过程中动态加载的。JVM在第一次读取到一种class类型时，将其加载进内存。每加载一种class，JVM就为其创建一个Class类型的实例，并关联起来。注意：这里的Class类型是一个名叫Class的class。该Class包含了该类型的所有信息。<strong>通过Class实例获取类信息的方式叫做反射</strong></p>\n<h1 id=\"类动态加载\">类动态加载<a href=\"#类动态加载\" title=\"类动态加载\"></a></h1><p>JVM在执行Java程序的时候，并不是一次性把所有用到的class全部加载到内存，而是第一次需要用到class时才加载。利用这个特性我们可以在运行时动态加载类。</p>\n<h1 id=\"获取class实例\">获取Class实例<a href=\"#获取class实例\" title=\"获取Class实例\"></a></h1><ul><li><p>类型.class</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class cls = String<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>类的实例.getClass()</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">String s = <span class=\"string\">\"123\"</span>;</span><br><span class=\"line\">Class cls = s.getClass();</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><code>Class.forName(&quot;java.lang.String&quot;)</code></p>\n</li>\n</ul><h1 id=\"类的信息\">类的信息<a href=\"#类的信息\" title=\"类的信息\"></a></h1><ul><li><code>cls.getName()</code>获取全称</li>\n<li><code>cls.getSimpleName()</code>获取类名</li>\n<li><code>cls.getPackage().getName()</code>获取包名</li>\n<li><code>cls.isInterface()</code></li>\n<li><code>cls.isEnum()</code></li>\n<li><code>cls.isArray()</code></li>\n<li><code>cls.isPrimitive()</code></li>\n</ul><h1 id=\"字段信息\">字段信息<a href=\"#字段信息\" title=\"字段信息\"></a></h1><h2 id=\"获取field对象\">获取Field对象<a href=\"#获取field对象\" title=\"获取Field对象\"></a></h2><ul><li><code>Field getField(name)</code>根据字段名获取某个public的field（包括父类）</li>\n<li><code>Field getDeclaredField(name)</code>根据字段名获取当前类的某个field（不包括父类)</li>\n<li><code>Field[] getFields()</code>获取所有public的field（包括父类）</li>\n<li><code>Field[] getDeclaredFields()</code>获取当前类的所有field（不包括父类）</li>\n</ul><h2 id=\"获取field对象的信息\">获取Field对象的信息<a href=\"#获取field对象的信息\" title=\"获取Field对象的信息\"></a></h2><ul><li><code>getName()</code>返回字段名称，例如，&quot;name&quot;；</li>\n<li><code>getType()</code>返回字段类型，也是一个<code>Class</code>实例，例如，<code>String.class</code>；</li>\n<li><code>getModifiers()</code>返回字段的修饰符，它是一个<code>int</code>，不同的bit表示不同的含义。<blockquote>\n<p>可用Modifier类的一些静态方法来判断</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Field f = String.class.getDeclaredField(\"value\");</span><br><span class=\"line\">f.getName(); <span class=\"comment\">// \"value\"</span></span><br><span class=\"line\">f.getType(); <span class=\"comment\">// class [B 表示byte[]类型</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> m = f.getModifiers();</span><br><span class=\"line\">Modifier.isFinal(m); <span class=\"comment\">// true</span></span><br><span class=\"line\">Modifier.isPublic(m); <span class=\"comment\">// false</span></span><br><span class=\"line\">Modifier.isProtected(m); <span class=\"comment\">// false</span></span><br><span class=\"line\">Modifier.isPrivate(m); <span class=\"comment\">// true</span></span><br><span class=\"line\">Modifier.isStatic(m); <span class=\"comment\">// false</span></span><br></pre></td></tr></table></figure>\n</blockquote>\n</li>\n</ul><h2 id=\"获取field的值\">获取Field的值<a href=\"#获取field的值\" title=\"获取Field的值\"></a></h2><ul><li><code>字段.get(类的实例对象)</code>访问实例对象的该字段值</li>\n<li><code>字段.setAccessible(true)</code>设置实例对象该字段值的可访问性</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Object p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Xiao Ming\"</span>);</span><br><span class=\"line\">        Class c = p.getClass();</span><br><span class=\"line\">        Field f = c.getDeclaredField(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        Object value = f.get(p);</span><br><span class=\"line\">        System.out.println(value); <span class=\"comment\">// \"Xiao Ming\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"设置字段的值\">设置字段的值<a href=\"#设置字段的值\" title=\"设置字段的值\"></a></h2><ul><li><code>字段.set(类的实例对象, 值)</code>访问实例对象的该字段值</li>\n<li><code>字段.setAccessible(true)</code>设置实例对象该字段值的可访问性</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">        Person p = <span class=\"keyword\">new</span> Person(<span class=\"string\">\"Xiao Ming\"</span>);</span><br><span class=\"line\">        System.out.println(p.getName()); <span class=\"comment\">// \"Xiao Ming\"</span></span><br><span class=\"line\">        Class c = p.getClass();</span><br><span class=\"line\">        Field f = c.getDeclaredField(<span class=\"string\">\"name\"</span>);</span><br><span class=\"line\">        f.setAccessible(<span class=\"keyword\">true</span>);</span><br><span class=\"line\">        f.set(p, <span class=\"string\">\"Xiao Hong\"</span>);</span><br><span class=\"line\">        System.out.println(p.getName()); <span class=\"comment\">// \"Xiao Hong\"</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Person</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String name;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Person</span><span class=\"params\">(String name)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.name = name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> String <span class=\"title\">getName</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">this</span>.name;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"方法信息\">方法信息<a href=\"#方法信息\" title=\"方法信息\"></a></h1><h2 id=\"获取method对象\">获取Method对象<a href=\"#获取method对象\" title=\"获取Method对象\"></a></h2><ul><li><code>Method getMethod(name, Class...)</code>获取某个public的Method（包括父类）(第二个参数parameterTypes是按声明顺序标识该方法形参类型，可用于重载的情况)</li>\n<li><code>Method getDeclaredMethod(name, Class...)</code>获取当前类的某个Method（不包括父类）(第二个参数parameterTypes是按声明顺序标识该方法形参类型，可用于重载的情况)</li>\n<li><code>Method[] getMethods()</code>获取所有public的Method（包括父类）</li>\n<li><code>Method[] getDeclaredMethods()</code>获取当前类的所有Method（不包括父类）</li>\n</ul><h2 id=\"获取method信息\">获取Method信息<a href=\"#获取method信息\" title=\"获取Method信息\"></a></h2><ul><li><code>getName()</code>返回方法名称，例如：&quot;getScore&quot;；</li>\n<li><code>getReturnType()</code>返回方法返回值类型，也是一个Class实例，例如：String.class；</li>\n<li><code>getParameterTypes()</code>返回方法的参数类型，是一个Class数组，例如：{String.class, int.class}；</li>\n<li><code>getModifiers()</code>返回方法的修饰符，它是一个int，不同的bit表示不同的含义。</li>\n</ul><h2 id=\"调用method\">调用Method<a href=\"#调用method\" title=\"调用Method\"></a></h2><ul><li><code>Method.invoke(对象实例，...)</code>传入对象实例和参数(静态方法第一个参数为null)</li>\n<li><code>Method.setAccessible(true)</code>调用非public方法时需要设置允许调用</li>\n</ul><h1 id=\"构造方法信息\">构造方法信息<a href=\"#构造方法信息\" title=\"构造方法信息\"></a></h1><h2 id=\"直接使用无参构造方法创建实例\">直接使用无参构造方法创建实例<a href=\"#直接使用无参构造方法创建实例\" title=\"直接使用无参构造方法创建实例\"></a></h2><ul><li><code>newInstance()</code></li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Persons p = Persons<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">newInstance</span>()</span>;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取constructor对象\">获取Constructor对象<a href=\"#获取constructor对象\" title=\"获取Constructor对象\"></a></h2><ul><li><code>getConstructor(Class...)</code>获取某个public的Constructor。</li>\n<li><code>getDeclaredConstructor(Class...)</code>获取某个Constructor。</li>\n<li><code>getConstructors()</code>获取所有public的Constructor。</li>\n<li><code>getDeclaredConstructors()</code>获取所有Constructor。</li>\n</ul><h2 id=\"调用constructor\">调用Constructor<a href=\"#调用constructor\" title=\"调用Constructor\"></a></h2><ul><li><code>newInstance()</code></li>\n<li><code>setAccessable(true)</code>获取访问权限</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Constructor cons1 = Integer<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getConstructor</span>(<span class=\"title\">int</span>.<span class=\"title\">class</span>)</span>;</span><br><span class=\"line\">Integer n1 = (Integer) cons1.newInstance(<span class=\"number\">123</span>);</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"注解信息\">注解信息<a href=\"#注解信息\" title=\"注解信息\"></a></h1><h2 id=\"判断注解是否存在\">判断注解是否存在<a href=\"#判断注解是否存在\" title=\"判断注解是否存在\"></a></h2><ul><li><code>Class.isAnnotationPresent(Class)</code></li>\n<li><code>Field.isAnnotationPresent(Class)</code></li>\n<li><code>Method.isAnnotationPresent(Class)</code></li>\n<li><code>Constructor.isAnnotationPresent(Class)</code></li>\n</ul><h2 id=\"获取annotation对象\">获取Annotation对象<a href=\"#获取annotation对象\" title=\"获取Annotation对象\"></a></h2><p>获取指定的注解(需要手动转型)</p>\n<ul><li><code>Class.getAnnotation(Class)</code></li>\n<li><code>Field.getAnnotation(Class)</code></li>\n<li><code>Method.getAnnotation(Class)</code></li>\n<li><code>Constructor.getAnnotation(Class)</code></li>\n</ul><p>获取所有的注解</p>\n<ul><li><code>Class.getAnnotations()</code></li>\n<li><code>Field.getAnnotations()</code></li>\n<li><code>Method.getAnnotations()</code></li>\n<li><code>Constructor.getAnnotations()</code></li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Target</span>(ElementType.TYPE)</span><br><span class=\"line\"><span class=\"meta\">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class=\"line\"><span class=\"meta\">@interface</span> OptimizerConfig&#123;</span><br><span class=\"line\">    <span class=\"function\">String <span class=\"title\">type</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> \"SGD\"</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">lr</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 0.02</span>;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">epoch</span><span class=\"params\">()</span> <span class=\"keyword\">default</span> 12</span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">@OptimizerConfig</span>(type=<span class=\"string\">\"SGD\"</span>, lr=<span class=\"number\">0.01</span>, epoch=<span class=\"number\">20</span>)</span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Model</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> String type = <span class=\"string\">\"SGD\"</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">double</span> lr = <span class=\"number\">0.02</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> epoch = <span class=\"number\">12</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Model</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        Class cls = getClass();</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(cls.isAnnotationPresent(OptimizerConfig<span class=\"class\">.<span class=\"keyword\">class</span>))</span>&#123;</span><br><span class=\"line\">            OptimizerConfig config = (OptimizerConfig) cls.getAnnotation(OptimizerConfig<span class=\"class\">.<span class=\"keyword\">class</span>)</span>;</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.type =  config.type();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.lr = config.lr();</span><br><span class=\"line\">            <span class=\"keyword\">this</span>.epoch = config.epoch();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Running with config:\"</span>);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Type:\"</span> + type);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Lr:\"</span> + lr);</span><br><span class=\"line\">        System.out.println(<span class=\"string\">\"Epoch:\"</span> + epoch);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>获取方法参数的注解</strong>\n方法参数本身可以看成一个数组，而每个参数又可以定义多个注解，所以，一次获取方法参数的所有注解就必须用一个二维数组来表示。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">hello</span><span class=\"params\">(@NotNull @Range(max=<span class=\"number\">5</span>)</span> String name, @NotNull String prefix) </span>&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 获取Method实例:</span></span><br><span class=\"line\">Method m = ...</span><br><span class=\"line\"><span class=\"comment\">// 获取所有参数的Annotation:</span></span><br><span class=\"line\">Annotation[][] annos = m.getParameterAnnotations();</span><br><span class=\"line\"><span class=\"comment\">// 第一个参数（索引为0）的所有Annotation:</span></span><br><span class=\"line\">Annotation[] annosOfName = annos[<span class=\"number\">0</span>];</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Annotation anno : annosOfName) &#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anno <span class=\"keyword\">instanceof</span> Range) &#123; <span class=\"comment\">// @Range注解</span></span><br><span class=\"line\">        Range r = (Range) anno;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (anno <span class=\"keyword\">instanceof</span> NotNull) &#123; <span class=\"comment\">// @NotNull注解</span></span><br><span class=\"line\">        NotNull n = (NotNull) anno;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"获取继承关系\">获取继承关系<a href=\"#获取继承关系\" title=\"获取继承关系\"></a></h1><h2 id=\"获取父类的class\">获取父类的Class<a href=\"#获取父类的class\" title=\"获取父类的Class\"></a></h2><ul><li><code>getSuperClass()</code></li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class cls = Integer<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\">Class superCls = cls.getSuperClass();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"获取interface\">获取Interface<a href=\"#获取interface\" title=\"获取Interface\"></a></h2><p>用来查询类实现的接口(只返回直接实现的接口，不返回父类实现的)</p>\n<ul><li><code>getInterfaces()</code></li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class cls = Integer<span class=\"class\">.<span class=\"keyword\">class</span></span>;</span><br><span class=\"line\"><span class=\"comment\">// Interface也是Class</span></span><br><span class=\"line\">Class[] interfaces = cls.getInterfaces();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"判断继承关系\">判断继承关系<a href=\"#判断继承关系\" title=\"判断继承关系\"></a></h2><ul><li><code>isinstanceof</code>, <code>A isinstancesof B</code>当A为B类或者B类的子类时，返回<code>true</code>(向下判断)</li>\n<li><code>isAssignableFrom</code>, <code>A.isAssignableFrom(B)</code>当B能向上转型为A时返回true(向上判断)</li>\n</ul><h1 id=\"动态代理\">动态代理<a href=\"#动态代理\" title=\"动态代理\"></a></h1><p>动态代理技术即可实现在运行时动态创建实现某个<code>Interface</code>的实例。动态代理实际上是JDK在运行期动态创建class字节码并加载的过程。</p>\n<ul><li><code>InvocationHandler</code>负责进行具体方法的实现或者增强</li>\n<li><code>Proxy.newProxyInstance()</code>创建代理对象</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">Flyable</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">fly</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">        InvocationHandler handler = <span class=\"keyword\">new</span> InvocationHandler() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">invoke</span><span class=\"params\">(Object proxy, Method method, Object[] args)</span> <span class=\"keyword\">throws</span> Throwable </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(method.getName().equals(<span class=\"string\">\"fly\"</span>))&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"判断该方法为目标方法，下面开始实现\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"Flying.....\"</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"方法实现结束\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"下面返回参数\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">        Flyable flyable = (Flyable) Proxy.newProxyInstance(</span><br><span class=\"line\">                Flyable<span class=\"class\">.<span class=\"keyword\">class</span>.<span class=\"title\">getClassLoader</span>(), // 传入<span class=\"title\">ClassLoader</span></span></span><br><span class=\"line\">                new Class[]&#123;Flyable.class&#125;, // 传入要实现的接口</span><br><span class=\"line\">                handler <span class=\"comment\">// 传入InvocationHandler</span></span><br><span class=\"line\">        );</span><br><span class=\"line\"></span><br><span class=\"line\">        flyable.fly();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","prev":{"title":"5-MyBatis缓存","link":"post/Java/MyBatis/5-MyBatis缓存"},"next":{"title":"1-SpringMVC入门","link":"post/Java/SpringMVC/1-SpringMVC入门"},"plink":"https://beginc.github.io/post/Java/Java语言/Java反射/","toc":[{"id":"class与反射","title":"Class与反射","index":"1"},{"id":"类动态加载","title":"类动态加载","index":"2"},{"id":"获取class实例","title":"获取Class实例","index":"3"},{"id":"类的信息","title":"类的信息","index":"4"},{"id":"字段信息","title":"字段信息","index":"5","children":[{"id":"获取field对象","title":"获取Field对象","index":"5.1"},{"id":"获取field对象的信息","title":"获取Field对象的信息","index":"5.2"},{"id":"获取field的值","title":"获取Field的值","index":"5.3"},{"id":"设置字段的值","title":"设置字段的值","index":"5.4"}]},{"id":"方法信息","title":"方法信息","index":"6","children":[{"id":"获取method对象","title":"获取Method对象","index":"6.1"},{"id":"获取method信息","title":"获取Method信息","index":"6.2"},{"id":"调用method","title":"调用Method","index":"6.3"}]},{"id":"构造方法信息","title":"构造方法信息","index":"7","children":[{"id":"直接使用无参构造方法创建实例","title":"直接使用无参构造方法创建实例","index":"7.1"},{"id":"获取constructor对象","title":"获取Constructor对象","index":"7.2"},{"id":"调用constructor","title":"调用Constructor","index":"7.3"}]},{"id":"注解信息","title":"注解信息","index":"8","children":[{"id":"判断注解是否存在","title":"判断注解是否存在","index":"8.1"},{"id":"获取annotation对象","title":"获取Annotation对象","index":"8.2"}]},{"id":"获取继承关系","title":"获取继承关系","index":"9","children":[{"id":"获取父类的class","title":"获取父类的Class","index":"9.1"},{"id":"获取interface","title":"获取Interface","index":"9.2"},{"id":"判断继承关系","title":"判断继承关系","index":"9.3"}]},{"id":"动态代理","title":"动态代理","index":"10"}]}