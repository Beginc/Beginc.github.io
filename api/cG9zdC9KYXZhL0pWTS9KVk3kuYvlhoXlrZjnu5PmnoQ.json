{"title":"JVM之内存结构","date":"2020-03-01T01:41:09.000Z","date_formatted":{"ll":"Mar 1, 2020","L":"03/01/2020","MM-DD":"03-01"},"thumbnail":"post/Java/JVM/JVM之内存结构/cover.jpg","link":"post/Java/JVM/JVM之内存结构","categories":["JVM","Java"],"updated":"2020-03-03T08:15:54.496Z","content":"<h1 id=\"jvm内存结构\">JVM内存结构<a href=\"#jvm内存结构\" title=\"JVM内存结构\"></a></h1><img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301100034000.png\" class=\"\">\n\n<h1 id=\"程序计数器\">程序计数器<a href=\"#程序计数器\" title=\"程序计数器\"></a></h1><ul><li>是一块较小的内存空间</li>\n<li>记录当前线程的PC</li>\n<li>线程私有</li>\n<li>无OutOfMemoryError</li>\n</ul><h1 id=\"虚拟机栈\">虚拟机栈<a href=\"#虚拟机栈\" title=\"虚拟机栈\"></a></h1><ul><li>线程私有</li>\n<li>每个执行的方法会在栈里分配一个栈帧(Frame)<ul><li>参数</li>\n<li>局部变量表</li>\n<li>返回地址</li>\n</ul></li>\n</ul><p><strong>垃圾回收</strong></p>\n<p>虚拟机栈不涉及垃圾回收，因为方法调用完成后，栈帧就会弹出，回收内存。</p>\n<p><strong>栈内存溢出</strong></p>\n<ul><li>方法调用层数过多（死递归）</li>\n<li>栈帧过大</li>\n</ul><p><strong>VM参数</strong></p>\n<ul><li>-Xss：设置栈大小</li>\n</ul><h1 id=\"本地方法栈\">本地方法栈<a href=\"#本地方法栈\" title=\"本地方法栈\"></a></h1><p>调用Native方法使用的栈。</p>\n<h1 id=\"堆\">堆<a href=\"#堆\" title=\"堆\"></a></h1><ul><li>线程共享</li>\n<li>需要GC</li>\n<li>每个线程都有私有的分配缓冲区(Thread Local Allocation Buffer)，提升对象分配时的效率</li>\n</ul><p><strong>VM参数</strong></p>\n<ul><li>-Xmx：最大堆空间</li>\n</ul><h1 id=\"方法区\">方法区<a href=\"#方法区\" title=\"方法区\"></a></h1><ul><li>存放于类相关的信息</li>\n<li>1.6使用永久代实现</li>\n<li>1.8使用元空间实现</li>\n</ul><img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301100911426.png\" class=\"\">\n\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301100848699.png\" class=\"\">\n\n<p>类在C++中使用instanceKlass来描述。</p>\n<ul><li>java_mirror为暴露给Java使用的接口</li>\n</ul><img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200303161455358.png\" class=\"\">\n\n<p><strong>VM参数</strong></p>\n<ul><li>-XX:MaxMetaspaceSize=8m最大元空间大小</li>\n<li>-XX:MaxPermSize=8m最大永久代大小</li>\n</ul><h2 id=\"运行时常量池\">运行时常量池<a href=\"#运行时常量池\" title=\"运行时常量池\"></a></h2><p>常量池就是一张表，虚拟机根据常量池找到要执行的类名，方法名，参数类型，字面常量等信息。class文件被加载进内存时，<strong>会将常量池中的符号解析为真实地址</strong>，常量池就变成了运行时常量池。</p>\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301101652871.png\" class=\"\">\n\n<h2 id=\"stringtable\">StringTable<a href=\"#stringtable\" title=\"StringTable\"></a></h2><p>StringTable的引入是为了复用字符串对象，减少内存使用。</p>\n<ul><li>常量池中的字符串仅仅是符号，第一次使用时才变成对象（运行时才创建，延迟加载）。</li>\n<li>第一次使用变成对象时，会将该字符串对象放入StringTable(如果不存在)。</li>\n<li>StringTable就是一个哈希表。</li>\n</ul><p><strong>StringTable位置</strong></p>\n<ul><li>1.6：永久代方法区</li>\n<li>1.8：堆</li>\n</ul><p><strong>字符串常量拼接</strong></p>\n<ul><li>利用编译期优化会将&quot;a&quot; + &quot;b&quot;直接合并成&quot;ab&quot;</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        String a = <span class=\"string\">\"a\"</span> + <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301102827372.png\" class=\"\">\n\n<p><strong>字符串对象拼接</strong></p>\n<ul><li>利用StringBuilder</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span></span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span></span>&#123;</span><br><span class=\"line\">        String a = <span class=\"string\">\"a\"</span>;</span><br><span class=\"line\">        String b = <span class=\"string\">\"b\"</span>;</span><br><span class=\"line\">        String c = a + b;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301102933725.png\" class=\"\">\n\n<p><strong>手动放入StringTable</strong></p>\n<p>String.intern()</p>\n<ul><li>1.8<ul><li>若该字符串不在串池，则将其放入串池，返回串池中的对象。</li>\n<li>若该字符串在串池，不会放入，返回本身。</li>\n</ul></li>\n<li>1.6<ul><li>若该字符串不在串池，则将其复制一份放入串池，返回串池中的对象。</li>\n<li>若该字符串在串池，不会放入，返回本身。</li>\n</ul></li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException </span>&#123;</span><br><span class=\"line\">        String s1 = <span class=\"string\">\"ab\"</span>;</span><br><span class=\"line\">        String s2 = <span class=\"keyword\">new</span> String(<span class=\"string\">\"a\"</span>) + <span class=\"keyword\">new</span> String(<span class=\"string\">\"b\"</span>);</span><br><span class=\"line\">        <span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(s1 == s2);</span><br><span class=\"line\">        String s3 = s2.intern();</span><br><span class=\"line\">        <span class=\"comment\">// false</span></span><br><span class=\"line\">        System.out.println(s1 == s2);</span><br><span class=\"line\">        <span class=\"comment\">// true</span></span><br><span class=\"line\">        System.out.println(s1 == s3);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>VM参数</strong></p>\n<ul><li>-XX:+PrintStringTableStatistics打印StringTable信息</li>\n</ul><img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301104444761.png\" class=\"\">\n\n<ul><li>-XX:StringTableSize=200000调整StringTable桶的个数</li>\n</ul><h1 id=\"直接内存\">直接内存<a href=\"#直接内存\" title=\"直接内存\"></a></h1><ul><li><p>用于NIO，当做数据缓冲区</p>\n</li>\n<li><p>分配回收成本较高</p>\n</li>\n<li><p>读写性能高</p>\n</li>\n<li><p>不受JVM垃圾回收管理</p>\n</li>\n<li><p>JVM和系统共用直接内存（不是内核缓冲，减少了一次拷贝）</p>\n</li>\n</ul><img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301105248117.png\" class=\"\">\n\n<p><strong>直接内存回收原理</strong></p>\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301110005130.png\" class=\"\">\n\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301110033043.png\" class=\"\">\n\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E5%86%85%E5%AD%98%E7%BB%93%E6%9E%84/image-20200301110107646.png\" class=\"\">\n\n\n\n\n\n\n\n","prev":{"title":"Redis之String","link":"post/中间件/Redis/Redis之String"},"next":{"title":"JVM之垃圾回收","link":"post/Java/JVM/JVM之垃圾回收"},"plink":"https://beginc.github.io/post/Java/JVM/JVM之内存结构/","toc":[{"id":"jvm内存结构","title":"JVM内存结构","index":"1"},{"id":"程序计数器","title":"程序计数器","index":"2"},{"id":"虚拟机栈","title":"虚拟机栈","index":"3"},{"id":"本地方法栈","title":"本地方法栈","index":"4"},{"id":"堆","title":"堆","index":"5"},{"id":"方法区","title":"方法区","index":"6","children":[{"id":"运行时常量池","title":"运行时常量池","index":"6.1"},{"id":"stringtable","title":"StringTable","index":"6.2"}]},{"id":"直接内存","title":"直接内存","index":"7"}]}