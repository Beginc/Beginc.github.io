{"title":"Java并发之Synchronized","date":"2020-02-12T14:24:04.000Z","date_formatted":{"ll":"Feb 12, 2020","L":"02/12/2020","MM-DD":"02-12"},"link":"post/Java/Java语言/Java并发之Synchronized","categories":["Java","Java语言"],"updated":"2020-02-13T08:13:49.173Z","content":"<h1 id=\"临界区\">临界区<a href=\"#临界区\" title=\"临界区\"></a></h1><p>程序运行时会有许多的共享资源，有些线程需要对资源进行读，有些线程需要对线程进行写，此时需要一种互斥机制来限制对共享资源的访问。在操作系统中我们学习了使用信号量来对临界区进行上锁，还学习了管程的一些知识，本篇介绍Java中的synchronized关键字，其底层便是使用管程进行实现。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 开启十个线程</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 每个线程把counter加10次1</span></span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//--------临界区------------</span></span><br><span class=\"line\">                    counter++;</span><br><span class=\"line\">                    <span class=\"comment\">//-------------------------</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 最终结果大部分时候小于100</span></span><br><span class=\"line\">        System.out.println(counter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n<h1 id=\"synchronized使用方法\">Synchronized使用方法<a href=\"#synchronized使用方法\" title=\"Synchronized使用方法\"></a></h1><h2 id=\"同步代码块\">同步代码块<a href=\"#同步代码块\" title=\"同步代码块\"></a></h2><p><strong>语法</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">synchronized</span>(对象)&#123;</span><br><span class=\"line\">    临界区</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>在counter例子中，由于在访问共享资源counter时没有进行互斥处理，所以导致出现了线程安全问题，这里我们使用synchronized关键字来保护临界区。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">int</span> counter = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 锁对象</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Object lock = <span class=\"keyword\">new</span> Object();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(() -&gt; &#123;</span><br><span class=\"line\">                <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">10</span>; j++) &#123;</span><br><span class=\"line\">                    <span class=\"comment\">//--------临界区------------</span></span><br><span class=\"line\">                    <span class=\"keyword\">synchronized</span> (lock)&#123;</span><br><span class=\"line\">                        counter++;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"comment\">//-------------------------</span></span><br><span class=\"line\">                    <span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">                        Thread.sleep(<span class=\"number\">500</span>);</span><br><span class=\"line\">                    &#125; <span class=\"keyword\">catch</span> (InterruptedException e) &#123;</span><br><span class=\"line\">                        e.printStackTrace();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">6000</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 最终结果为100</span></span><br><span class=\"line\">        System.out.println(counter);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"同步方法\">同步方法<a href=\"#同步方法\" title=\"同步方法\"></a></h2><p><strong>非静态方法</strong></p>\n<p>非静态同步方法使用本类实例作为锁对象。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(<span class=\"keyword\">this</span>)&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>静态方法</strong></p>\n<p>静态同步方法使用本类Class对象作为锁对象。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 相当于</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">method</span><span class=\"params\">()</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">synchronized</span>(Main<span class=\"class\">.<span class=\"keyword\">class</span>)</span>&#123;</span><br><span class=\"line\">            </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"synchronized使用案例\">Synchronized使用案例<a href=\"#synchronized使用案例\" title=\"Synchronized使用案例\"></a></h1><p>一个卖票的窗口总共十张票，我们让十五个线程来每个线程买一张票。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> InterruptedException </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">// 一共十张票</span></span><br><span class=\"line\">        TicketWindow window = <span class=\"keyword\">new</span> TicketWindow(<span class=\"number\">10</span>);</span><br><span class=\"line\">        <span class=\"comment\">// 十五个线程每个线程买一张</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">15</span>; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                <span class=\"meta\">@Override</span></span><br><span class=\"line\">                <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> num = window.sell(<span class=\"number\">1</span>);</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"[\"</span> + Thread.currentThread().getName() + <span class=\"string\">\"]: 买到了\"</span> + num + <span class=\"string\">\"张票\"</span>);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;, <span class=\"string\">\"Thread\"</span> + i).start();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        Thread.sleep(<span class=\"number\">1000</span>);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TicketWindow</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> numTickets;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">TicketWindow</span><span class=\"params\">(<span class=\"keyword\">int</span> numTickets)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.numTickets = numTickets;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getNumTickets</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> numTickets;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 买票</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> num 买多少张票</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span> - &gt; 0：买到的票的数目</span></span><br><span class=\"line\"><span class=\"comment\">     *         - = 0：没买到票</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">synchronized</span> <span class=\"keyword\">int</span> <span class=\"title\">sell</span><span class=\"params\">(<span class=\"keyword\">int</span> num)</span></span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(numTickets &gt; <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> sold = Math.min(numTickets, num);</span><br><span class=\"line\">            numTickets -= sold;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> sold;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"synchronized原理\">Synchronized原理<a href=\"#synchronized原理\" title=\"Synchronized原理\"></a></h1><h2 id=\"java对象头\">Java对象头<a href=\"#java对象头\" title=\"Java对象头\"></a></h2><h3 id=\"普通对象\">普通对象<a href=\"#普通对象\" title=\"普通对象\"></a></h3><img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/2.png\" class=\"\">\n\n<h3 id=\"数组对象\">数组对象<a href=\"#数组对象\" title=\"数组对象\"></a></h3><img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/3.png\" class=\"\">\n\n<h3 id=\"kclass-word\">Kclass Word<a href=\"#kclass-word\" title=\"Kclass Word\"></a></h3><p>这一部分用于存储对象的类型指针，该指针指向它的类元数据，JVM通过这个指针确定对象是哪个类的实例。</p>\n<h3 id=\"mark-word\">Mark Word<a href=\"#mark-word\" title=\"Mark Word\"></a></h3><p>用于存储对象的一些运行时信息，如hashcode，gc分代年龄，锁信息等。</p>\n<img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/4.png\" class=\"\">\n\n<h2 id=\"重量级锁\">重量级锁<a href=\"#重量级锁\" title=\"重量级锁\"></a></h2><h3 id=\"管程monitor\">管程Monitor<a href=\"#管程monitor\" title=\"管程Monitor\"></a></h3><p>每个Java对象都可以通过将对象头的Mark Word的前30位替换成指向Monitor的指针来关联一个Monitor对象。</p>\n<img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/5.png\" class=\"\">\n\n<p><strong>Owner</strong></p>\n<p>当一个线程对该对象进行了synchronized(obj)操作后，该线程就成为了该Monitor中的Owner，可以进入临界区。</p>\n<p><strong>EntryList</strong></p>\n<ul><li>当Monitor已经有Owner后，若另外一个线程执行synchronized(obj)操作，则线程会发生阻塞，进入EntryList进行等待。</li>\n<li>当Owner执行完临界区的代码或进入WaitSet后，此时会唤醒EntryList中的线程来竞争锁。</li>\n</ul><p><strong>WaitSet</strong></p>\n<p>当一个线程是该Monitor的Owner，并且它调用了wait方法等待其他资源，则该线程会放弃Owner身份，进入WaitSet等待notify唤醒。</p>\n<img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/1.png\" class=\"\">\n\n<h3 id=\"自旋优化\">自旋优化<a href=\"#自旋优化\" title=\"自旋优化\"></a></h3><p>自旋其实意思就是重复尝试，当线程获取不到重量级锁时，可进行几次自旋（再次尝试获取锁），如果获取成功，则避免了进入阻塞，等待唤醒，减少了上下文切换，若自旋失败则进入EntryList阻塞。</p>\n<img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/11.png\" class=\"\">\n\n<p><strong>注意事项</strong></p>\n<ul><li>自旋要是和Owner线程一起执行的才有意义，即只有在<strong>多核CPU上自旋才有意义</strong>。</li>\n<li>Java 6 之后自旋的次数是自适应的。</li>\n<li>Java 7 之后不能控制是否开启自旋功能。</li>\n</ul><h2 id=\"轻量级锁\">轻量级锁<a href=\"#轻量级锁\" title=\"轻量级锁\"></a></h2><h3 id=\"应用场景\">应用场景<a href=\"#应用场景\" title=\"应用场景\"></a></h3><p>但一个对象虽然有多个线程要加锁，但是加锁的时间大部分是错卡的，若每次都使用重量级锁进行加锁，则无用的开销太大，此时可以使用轻量级锁来进行优化。<strong>自旋锁对用户是透明的。</strong></p>\n<h3 id=\"加锁\">加锁<a href=\"#加锁\" title=\"加锁\"></a></h3><p>当使用synchronized(obj)操作后，该线程的帧栈中会创建一个锁记录，其中包含了</p>\n<ul><li>锁记录的地址</li>\n<li>锁对象的地址</li>\n</ul><img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/6.png\" class=\"\">\n\n<p>此时会尝试使用CAS将锁记录地址与锁对象Mark Word的前30个字节进行交换。</p>\n<p><strong>CAS成功</strong></p>\n<p>对象头中存储了锁记录的地址和00，表示该线程给该对象加上了轻量级锁。</p>\n<img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/8.png\" class=\"\">\n\n<img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/7.png\" class=\"\">\n\n<p><strong>CAS失败</strong></p>\n<ul><li>若其他线程已经对该对象加了轻量级锁，则进入锁膨胀过程。</li>\n<li>若是自己已经对该对象加了轻量级锁，则发生锁重入过程。</li>\n</ul><h3 id=\"解锁\">解锁<a href=\"#解锁\" title=\"解锁\"></a></h3><p>尝试使用CAS恢复锁对象的Mark Word</p>\n<p><strong>CAS成功</strong></p>\n<p>解锁成功。</p>\n<p><strong>CAS失败</strong></p>\n<p>说明已经发生了锁膨胀，进入重量级锁解锁流程。</p>\n<h3 id=\"锁膨胀\">锁膨胀<a href=\"#锁膨胀\" title=\"锁膨胀\"></a></h3><ul><li>为锁对象申请Monitor，让锁对象指向Monitor。</li>\n</ul><img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/5.png\" class=\"\">\n\n<ul><li>自己进入Monitor的EntryList等待锁。</li>\n</ul><img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/9.png\" class=\"\">\n\n<h3 id=\"锁重入\">锁重入<a href=\"#锁重入\" title=\"锁重入\"></a></h3><ul><li>再添加一条Lock Record，其中锁记录地址为null，用来作为重入计数</li>\n<li>当解锁时<ul><li>若有锁记录地址为null的Lock Record则删除它，重入数减1。</li>\n<li>若Lock Record的锁记录地址不为null，则使用CAS将锁对象的Mark Word恢复。</li>\n</ul></li>\n</ul><img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/10.png\" class=\"\">\n\n<h2 id=\"偏向锁\">偏向锁<a href=\"#偏向锁\" title=\"偏向锁\"></a></h2><h3 id=\"应用场景-1\">应用场景<a href=\"#应用场景-1\" title=\"应用场景\"></a></h3><p>当一个对象有多个线程要加锁，但是大部分时候只有一个线程使用，此时若每次还进行CAS操作加轻量级锁，则也有很多无用的开销，此时可使用偏向锁进行优化。偏向锁需要开启之后使用，开启后对象头Mark Word的biased_lock位为1。</p>\n<img src=\"/post/Java/Java%E8%AF%AD%E8%A8%80/Java%E5%B9%B6%E5%8F%91%E4%B9%8BSynchronized/12.png\" class=\"\">\n\n<p><strong>延迟开启偏向锁</strong></p>\n<p>偏向锁默认是延迟开启的，可使用<code>-XX:BiasedLockingStartupDelay=0</code>来关闭延迟。</p>\n<h3 id=\"加锁-1\">加锁<a href=\"#加锁-1\" title=\"加锁\"></a></h3>","prev":{"title":"Java并发之变量的线程安全分析","link":"post/Java/Java语言/Java并发之变量的线程安全分析"},"next":{"title":"Java并发之保护性暂停模式","link":"post/Java/Java语言/Java并发之保护性暂停模式"},"plink":"https://beginc.github.io/post/Java/Java语言/Java并发之Synchronized/","toc":[{"id":"临界区","title":"临界区","index":"1"},{"id":"synchronized使用方法","title":"Synchronized使用方法","index":"2","children":[{"id":"同步代码块","title":"同步代码块","index":"2.1"},{"id":"同步方法","title":"同步方法","index":"2.2"}]},{"id":"synchronized使用案例","title":"Synchronized使用案例","index":"3"},{"id":"synchronized原理","title":"Synchronized原理","index":"4","children":[{"id":"java对象头","title":"Java对象头","index":"4.1","children":[{"id":"普通对象","title":"普通对象","index":"4.1.1"},{"id":"数组对象","title":"数组对象","index":"4.1.2"},{"id":"kclass-word","title":"Kclass Word","index":"4.1.3"},{"id":"mark-word","title":"Mark Word","index":"4.1.4"}]},{"id":"重量级锁","title":"重量级锁","index":"4.2","children":[{"id":"管程monitor","title":"管程Monitor","index":"4.2.1"},{"id":"自旋优化","title":"自旋优化","index":"4.2.2"}]},{"id":"轻量级锁","title":"轻量级锁","index":"4.3","children":[{"id":"应用场景","title":"应用场景","index":"4.3.1"},{"id":"加锁","title":"加锁","index":"4.3.2"},{"id":"解锁","title":"解锁","index":"4.3.3"},{"id":"锁膨胀","title":"锁膨胀","index":"4.3.4"},{"id":"锁重入","title":"锁重入","index":"4.3.5"}]},{"id":"偏向锁","title":"偏向锁","index":"4.4","children":[{"id":"应用场景-1","title":"应用场景","index":"4.4.1"},{"id":"加锁-1","title":"加锁","index":"4.4.2"}]}]}]}