{"title":"Redis之分布式锁","date":"2020-03-02T09:12:23.000Z","date_formatted":{"ll":"Mar 2, 2020","L":"03/02/2020","MM-DD":"03-02"},"thumbnail":"post/中间件/Redis/Redis之分布式锁/cover.png","link":"post/中间件/Redis/Redis之分布式锁","categories":["Redis","中间件"],"updated":"2020-03-02T10:26:54.031Z","content":"<h1 id=\"分布式锁场景\">分布式锁场景<a href=\"#分布式锁场景\" title=\"分布式锁场景\"></a></h1><h2 id=\"商品下单\">商品下单<a href=\"#商品下单\" title=\"商品下单\"></a></h2><p>以下代码模拟下单过程。</p>\n<ul><li>先获取商品库存数量</li>\n<li>若大于0则下单</li>\n<li>若小于0则失败</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> Inventory inventory;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> LongAdder adder = <span class=\"keyword\">new</span> LongAdder();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> CountDownLatch latch;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> IOException, InterruptedException </span>&#123;</span><br><span class=\"line\">        ExecutorService executor = Executors.newCachedThreadPool();</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; <span class=\"number\">10</span>; i++) &#123;</span><br><span class=\"line\">            latch = <span class=\"keyword\">new</span> CountDownLatch(<span class=\"number\">20</span>);</span><br><span class=\"line\">            inventory = <span class=\"keyword\">new</span> Inventory(<span class=\"number\">10</span>);</span><br><span class=\"line\">            adder.reset();</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; <span class=\"number\">20</span>; j++) &#123;</span><br><span class=\"line\">                executor.submit(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">                    <span class=\"meta\">@Override</span></span><br><span class=\"line\">                    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (inventory.sell())</span><br><span class=\"line\">                            adder.increment();</span><br><span class=\"line\">                        latch.countDown();</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            latch.await();</span><br><span class=\"line\">            System.out.println(<span class=\"string\">\"共卖出了\"</span> + adder.intValue() + <span class=\"string\">\"件商品\"</span>);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        executor.shutdown();</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inventory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> stock;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inventory</span><span class=\"params\">(<span class=\"keyword\">int</span> stock)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stock = stock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getStock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sell</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (getStock() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            stock--;</span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>可看成发生了超卖。原因就是获取库存和减少库存（下单）不是原子性的。</p>\n<img src=\"/post/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/Redis%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/image-20200302173535920.png\" class=\"\">\n\n<p><strong>单机环境解决</strong></p>\n<p>在单机环境下我们进行加锁即可解决。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Inventory</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> stock;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantLock lock = <span class=\"keyword\">new</span> ReentrantLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">Inventory</span><span class=\"params\">(<span class=\"keyword\">int</span> stock)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">this</span>.stock = stock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">getStock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> stock;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">sell</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        lock.lock();</span><br><span class=\"line\">        <span class=\"keyword\">try</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (getStock() &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                stock--;</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">finally</span> &#123;</span><br><span class=\"line\">            lock.unlock();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<img src=\"/post/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/Redis%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/image-20200302173842493.png\" class=\"\">\n\n<p><strong>分布式环境</strong></p>\n<p>假如我们处在分布式环境，每个客户端都需要从服务器获取商品数量，判断之后然后下单，此时可能发生如下情况。<strong>究其原因还是获取库存数量以及下单操作不具有原子性。</strong>但是我们无法再通过简单的加锁实现了，此时我们需要分布式锁。</p>\n<img src=\"/post/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/Redis%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/image-20200302174306441.png\" class=\"\">\n\n<h1 id=\"redis分布式锁\">Redis分布式锁<a href=\"#redis分布式锁\" title=\"Redis分布式锁\"></a></h1><p>在Redis中我们可以使用Redis的SETNX命令来实现分布式锁。</p>\n<h2 id=\"流程\">流程<a href=\"#流程\" title=\"流程\"></a></h2><ol><li>SETNX lock 1<ul><li>加锁</li>\n</ul></li>\n<li>若设置成功（获取锁成功）则进行事务操作</li>\n<li>若设置失败（获取锁失败）则等待</li>\n<li>DEL lock<ul><li>解锁</li>\n</ul></li>\n</ol><h2 id=\"死锁\">死锁<a href=\"#死锁\" title=\"死锁\"></a></h2><p>若一个客户端获取到锁后宕机了，则此时会发生死锁。</p>\n<h3 id=\"解决策略\">解决策略<a href=\"#解决策略\" title=\"解决策略\"></a></h3><p>为lock设置超时时间。</p>\n<h4 id=\"方案一\">方案一<a href=\"#方案一\" title=\"方案一\"></a></h4><ol><li>SETNX lock 1</li>\n<li>EXPIRE lock 10<ul><li>设置超时时间</li>\n</ul></li>\n</ol><h4 id=\"方案二\">方案二<a href=\"#方案二\" title=\"方案二\"></a></h4><p>方案一缺点是SETNX和EXPIRE不具有原子性。</p>\n<ol><li>SET lock 1 EX 10 NX</li>\n</ol><img src=\"/post/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/Redis%E4%B9%8B%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/image-20200302174913837.png\" class=\"\">\n\n","prev":{"title":"10-Spring之IoC容器初始化与Bean生命周期","link":"post/Java/Spring/10-Spring之IoC容器初始化与Bean生命周期"},"next":{"title":"Redis之数据删除策略","link":"post/中间件/Redis/Redis之数据删除策略"},"plink":"https://beginc.github.io/post/中间件/Redis/Redis之分布式锁/","toc":[{"id":"分布式锁场景","title":"分布式锁场景","index":"1","children":[{"id":"商品下单","title":"商品下单","index":"1.1"}]},{"id":"redis分布式锁","title":"Redis分布式锁","index":"2","children":[{"id":"流程","title":"流程","index":"2.1"},{"id":"死锁","title":"死锁","index":"2.2","children":[{"id":"解决策略","title":"解决策略","index":"2.2.1"}]}]}]}