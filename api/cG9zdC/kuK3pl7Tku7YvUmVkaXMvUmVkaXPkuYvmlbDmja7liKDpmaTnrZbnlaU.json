{"title":"Redis之数据删除策略","date":"2020-03-02T08:43:39.000Z","date_formatted":{"ll":"Mar 2, 2020","L":"03/02/2020","MM-DD":"03-02"},"thumbnail":"post/中间件/Redis/Redis之数据删除策略/cover.png","link":"post/中间件/Redis/Redis之数据删除策略","categories":["Redis","中间件"],"updated":"2020-03-02T10:26:54.031Z","content":"<h1 id=\"定时删除\">定时删除<a href=\"#定时删除\" title=\"定时删除\"></a></h1><p>为key设置一个过期时间，到达时间后马上将该key删除。</p>\n<p><strong>指令</strong></p>\n<ul><li>EXPIRE key seconds</li>\n<li>PEXPIRE key milliseconds</li>\n<li>EXPIREAT key timestamp</li>\n<li>PEXPIREAT key milliseconds-timestamp</li>\n<li>TTL key</li>\n<li>PTTL key</li>\n</ul><p><strong>特点</strong></p>\n<ul><li>节约内存，到期马上删除</li>\n<li>CPU压力大，占用CPU时间</li>\n</ul><h1 id=\"惰性删除\">惰性删除<a href=\"#惰性删除\" title=\"惰性删除\"></a></h1><p>为key设置一个国企时间，到达时间后，下次访问时再将其删除。</p>\n<p><strong>配置</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">lazyfree-lazy-expire yes</span><br></pre></td></tr></table></figure>\n\n<p><strong>特点</strong></p>\n<ul><li>CPU压力小</li>\n<li>会出现长期占用内存的数据</li>\n</ul><h1 id=\"定期删除\">定期删除<a href=\"#定期删除\" title=\"定期删除\"></a></h1><ol><li>每秒执行hz次serverCron()</li>\n<li>每次serverCron()遍历每个数据库执行databasesCron()</li>\n<li>每次databasesCron()对expires表进行循环检查<ul><li>随机挑选W个key进行检查，删除超时的key</li>\n<li>若一轮中删除的key的数量 &gt; W * 25%，则循环该过程</li>\n<li>若一轮中删除的key的数量 &lt;= W * 25%，则检查下一个库的expires</li>\n</ul></li>\n</ol><img src=\"/post/%E4%B8%AD%E9%97%B4%E4%BB%B6/Redis/Redis%E4%B9%8B%E6%95%B0%E6%8D%AE%E5%88%A0%E9%99%A4%E7%AD%96%E7%95%A5/image-20200302165833842.png\" class=\"\">\n\n<p><strong>特点</strong></p>\n<ol><li>CPU性能占用可控</li>\n<li>内存压力不是很大，过期数据被持续清理</li>\n</ol><p><strong>配置</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hz 10</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"淘汰策略\">淘汰策略<a href=\"#淘汰策略\" title=\"淘汰策略\"></a></h1><p>当内存满时且无过期数据，此时根据淘汰策略来删除一些数据</p>\n<h2 id=\"检查有时效的数据\">检查有时效的数据<a href=\"#检查有时效的数据\" title=\"检查有时效的数据\"></a></h2><ul><li>volatile-lru</li>\n<li>volatile-lfu</li>\n<li>volatile-ttl<ul><li>最快要过期的数据</li>\n</ul></li>\n<li>volatile-random</li>\n</ul><h2 id=\"检查全库\">检查全库<a href=\"#检查全库\" title=\"检查全库\"></a></h2><ul><li>allkeys-lru</li>\n<li>allkeys-lfu</li>\n<li>allkeys-random</li>\n</ul><h2 id=\"禁止淘汰\">禁止淘汰<a href=\"#禁止淘汰\" title=\"禁止淘汰\"></a></h2><ul><li>noenviction（<strong>默认策略</strong>）</li>\n</ul><h2 id=\"配置\">配置<a href=\"#配置\" title=\"配置\"></a></h2><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 最大内存占用</span></span><br><span class=\"line\">maxmemory 0</span><br><span class=\"line\"><span class=\"comment\"># 选取多少数据为待检测数据，不会开启全库扫描</span></span><br><span class=\"line\">maxmemory-samples</span><br><span class=\"line\"><span class=\"comment\"># 淘汰策略</span></span><br><span class=\"line\">maxmemory-policy</span><br></pre></td></tr></table></figure>\n\n\n\n","prev":{"title":"Redis之分布式锁","link":"post/中间件/Redis/Redis之分布式锁"},"next":{"title":"Redis之常见解决方案","link":"post/中间件/Redis/Redis之常见解决方案"},"plink":"https://beginc.github.io/post/中间件/Redis/Redis之数据删除策略/","toc":[{"id":"定时删除","title":"定时删除","index":"1"},{"id":"惰性删除","title":"惰性删除","index":"2"},{"id":"定期删除","title":"定期删除","index":"3"},{"id":"淘汰策略","title":"淘汰策略","index":"4","children":[{"id":"检查有时效的数据","title":"检查有时效的数据","index":"4.1"},{"id":"检查全库","title":"检查全库","index":"4.2"},{"id":"禁止淘汰","title":"禁止淘汰","index":"4.3"},{"id":"配置","title":"配置","index":"4.4"}]}]}