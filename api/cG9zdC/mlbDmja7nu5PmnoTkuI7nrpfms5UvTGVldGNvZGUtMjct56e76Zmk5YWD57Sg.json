{"title":"Leetcode-27-移除元素","date":"2020-01-24T02:14:26.000Z","date_formatted":{"ll":"Jan 24, 2020","L":"01/24/2020","MM-DD":"01-24"},"thumbnail":"post/数据结构与算法/Leetcode-27-移除元素/cover.jpg","link":"post/数据结构与算法/Leetcode-27-移除元素","categories":["数据结构与算法"],"updated":"2020-02-08T02:32:39.476Z","content":"<h1 id=\"题目\">题目<a href=\"#题目\" title=\"题目\"></a></h1><p>给定一个数组 nums 和一个值 val，你需要原地移除所有数值等于 val 的元素，返回移除后数组的新长度。</p>\n<p>不要使用额外的数组空间，你必须在原地修改输入数组并在使用 O(1) 额外空间的条件下完成。</p>\n<p>元素的顺序可以改变。你不需要考虑数组中超出新长度后面的元素。</p>\n<h1 id=\"示例\">示例<a href=\"#示例\" title=\"示例\"></a></h1><p><strong>示例 1:</strong></p>\n<pre><code>给定 nums = [3,2,2,3], val = 3,\n\n函数应该返回新的长度 2, 并且 nums 中的前两个元素均为 2。\n\n你不需要考虑数组中超出新长度后面的元素。</code></pre><p><strong>示例 2:</strong></p>\n<pre><code>给定 nums = [0,1,2,2,3,0,4,2], val = 2,\n\n函数应该返回新的长度 5, 并且 nums 中的前五个元素为 0, 1, 3, 0, 4。\n\n注意这五个元素可为任意顺序。\n\n你不需要考虑数组中超出新长度后面的元素。</code></pre><h1 id=\"解法1：单指针--slots\">解法1：单指针 + slots<a href=\"#解法1：单指针--slots\" title=\"解法1：单指针 + slots\"></a></h1><ul><li>单指针扫描数组</li>\n<li><code>slots</code>用来记录当前已经删除掉的元素数量</li>\n</ul><p>当<code>nums[i] != val</code>时，元素向前移动<code>slots</code>个位置，当<code>nums[i] == val</code>时，<code>slots++</code>，继续向前扫描。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> slots = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.length; i++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == val)</span><br><span class=\"line\">            slots++;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            nums[i - slots] = nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> nums.length - slots;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"复杂度分析\">复杂度分析<a href=\"#复杂度分析\" title=\"复杂度分析\"></a></h2><h3 id=\"时间\">时间<a href=\"#时间\" title=\"时间\"></a></h3><p>线性扫描<code>O(n)</code></p>\n<h3 id=\"空间\">空间<a href=\"#空间\" title=\"空间\"></a></h3><p><code>O(1)</code></p>\n<h2 id=\"进一步分析\">进一步分析<a href=\"#进一步分析\" title=\"进一步分析\"></a></h2><ul><li>当待删除元素出现在前半部分时，要移动的元素数量较多</li>\n<li>当待删除元素出现在后半部分时，要移动的元素数量较少</li>\n<li>当无待删除元素时，无需移动元素</li>\n</ul><h1 id=\"解法2：双前向指针\">解法2：双前向指针<a href=\"#解法2：双前向指针\" title=\"解法2：双前向指针\"></a></h1><ul><li>指针<code>i</code>记录当前非目标元素的个数</li>\n<li>指针<code>j</code>负责持续前向扫描</li>\n</ul><p>当前元素<code>nums[j]</code>:</p>\n<ul><li><code>nums[j] == val</code>，直接跳过，继续向前扫描</li>\n<li><code>nums[j] != val</code>，将该元素拷贝到<code>nums[i]</code></li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j = <span class=\"number\">0</span>; j &lt; nums.length; j++) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[j] != val) &#123;</span><br><span class=\"line\">            nums[i] = nums[j];</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂度分析-1\">复杂度分析<a href=\"#复杂度分析-1\" title=\"复杂度分析\"></a></h2><h3 id=\"时间-1\">时间<a href=\"#时间-1\" title=\"时间\"></a></h3><p>线性扫描<code>O(n)</code></p>\n<h3 id=\"空间-1\">空间<a href=\"#空间-1\" title=\"空间\"></a></h3><p><code>O(1)</code></p>\n<h2 id=\"进一步分析-1\">进一步分析<a href=\"#进一步分析-1\" title=\"进一步分析\"></a></h2><ul><li>所有非目标元素都需要移动，无效移动次数太多</li>\n</ul><h1 id=\"解法3：双指针一正一反\">解法3：双指针(一正一反)<a href=\"#解法3：双指针一正一反\" title=\"解法3：双指针(一正一反)\"></a></h1><ul><li>指针<code>i</code>负责持续前向扫描</li>\n<li>指针<code>n</code>记录当前数组的有效长度</li>\n</ul><p>当前元素<code>nums[i]</code>:</p>\n<ul><li><code>nums[i] == val</code>，互换<code>nums[i]</code> 与<code>nums[n - 1]</code></li>\n<li><code>nums[i] != val</code>，继续向前扫描</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">removeElement</span><span class=\"params\">(<span class=\"keyword\">int</span>[] nums, <span class=\"keyword\">int</span> val)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> n = nums.length;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (i &lt; n) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (nums[i] == val) &#123;</span><br><span class=\"line\">            nums[i] = nums[n - <span class=\"number\">1</span>];</span><br><span class=\"line\">            <span class=\"comment\">// reduce array size by one</span></span><br><span class=\"line\">            n--;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            i++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> n;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"复杂度分析-2\">复杂度分析<a href=\"#复杂度分析-2\" title=\"复杂度分析\"></a></h2><h3 id=\"时间-2\">时间<a href=\"#时间-2\" title=\"时间\"></a></h3><p>线性扫描<code>O(n)</code></p>\n<h3 id=\"空间-2\">空间<a href=\"#空间-2\" title=\"空间\"></a></h3><p><code>O(1)</code></p>\n<h2 id=\"进一步分析-2\">进一步分析<a href=\"#进一步分析-2\" title=\"进一步分析\"></a></h2><ul><li>移动的次数为目标元素的个数，避免了无效移动</li>\n<li>元素会乱序，但是题目不要求保持原有顺序</li>\n</ul>","prev":{"title":"Leetcode-26-删除排序数组中的重复项","link":"post/数据结构与算法/Leetcode-26-删除排序数组中的重复项"},"next":{"title":"Leetcode目录","link":"post/数据结构与算法/Leetcode目录"},"plink":"https://beginc.github.io/post/数据结构与算法/Leetcode-27-移除元素/","toc":[{"id":"题目","title":"题目","index":"1"},{"id":"示例","title":"示例","index":"2"},{"id":"解法1：单指针--slots","title":"解法1：单指针 + slots","index":"3","children":[{"id":"复杂度分析","title":"复杂度分析","index":"3.1","children":[{"id":"时间","title":"时间","index":"3.1.1"},{"id":"空间","title":"空间","index":"3.1.2"}]},{"id":"进一步分析","title":"进一步分析","index":"3.2"}]},{"id":"解法2：双前向指针","title":"解法2：双前向指针","index":"4","children":[{"id":"复杂度分析-1","title":"复杂度分析","index":"4.1","children":[{"id":"时间-1","title":"时间","index":"4.1.1"},{"id":"空间-1","title":"空间","index":"4.1.2"}]},{"id":"进一步分析-1","title":"进一步分析","index":"4.2"}]},{"id":"解法3：双指针一正一反","title":"解法3：双指针(一正一反)","index":"5","children":[{"id":"复杂度分析-2","title":"复杂度分析","index":"5.1","children":[{"id":"时间-2","title":"时间","index":"5.1.1"},{"id":"空间-2","title":"空间","index":"5.1.2"}]},{"id":"进一步分析-2","title":"进一步分析","index":"5.2"}]}]}