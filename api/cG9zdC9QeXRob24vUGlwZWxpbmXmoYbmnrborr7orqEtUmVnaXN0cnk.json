{"title":"Pipeline框架设计---Registry","date":"2019-09-06T03:36:45.000Z","thumbnail":"/post/Python/Pipeline框架设计-Registry/cover.jpg","link":"post/Python/Pipeline框架设计-Registry","categories":["Python"],"updated":"2020-01-08T08:31:06.569Z","content":"<h1 id=\"设计目的\">设计目的<a href=\"post/Python/Pipeline框架设计-Registry#设计目的\"></a></h1><p>要使得框架能够实现全配置文件化，必须提供某种机制，使得我们能够实例化任何在配置文件中所指定的类，并传递配置文件中的相关参数。</p>\n<h1 id=\"mmdet的实现\">mmdet的实现<a href=\"post/Python/Pipeline框架设计-Registry#mmdet的实现\"></a></h1><h2 id=\"Registry类\">Registry类<a href=\"post/Python/Pipeline框架设计-Registry#Registry类\"></a></h2><p>实现一个注册工厂类，用来存储和检索注册的类</p>\n<figure class=\"highlight python\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Registry</span><span class=\"params\">(object)</span>:</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        self._name = name</span><br><span class=\"line\">        self._module_dict = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__repr__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        format_str = self.__class__.__name__ + <span class=\"string\">'(name=&#123;&#125;, items=&#123;&#125;)'</span>.format(</span><br><span class=\"line\">            self._name, list(self._module_dict.keys()))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> format_str</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">name</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._name</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">module_dict</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._module_dict</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, key)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._module_dict.get(key, <span class=\"literal\">None</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">_register_module</span><span class=\"params\">(self, module_class)</span>:</span></span><br><span class=\"line\">        <span class=\"string\">\"\"\"Register a module.</span></span><br><span class=\"line\"><span class=\"string\"></span></span><br><span class=\"line\"><span class=\"string\">        Args:</span></span><br><span class=\"line\"><span class=\"string\">            module (:obj:`nn.Module`): Module to be registered.</span></span><br><span class=\"line\"><span class=\"string\">        \"\"\"</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> <span class=\"keyword\">not</span> inspect.isclass(module_class):</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> TypeError(<span class=\"string\">'module must be a class, but got &#123;&#125;'</span>.format(</span><br><span class=\"line\">                type(module_class)))</span><br><span class=\"line\">        module_name = module_class.__name__</span><br><span class=\"line\">        <span class=\"keyword\">if</span> module_name <span class=\"keyword\">in</span> self._module_dict:</span><br><span class=\"line\">            <span class=\"keyword\">raise</span> KeyError(<span class=\"string\">'&#123;&#125; is already registered in &#123;&#125;'</span>.format(</span><br><span class=\"line\">                module_name, self.name))</span><br><span class=\"line\">        self._module_dict[module_name] = module_class</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_module</span><span class=\"params\">(self, cls)</span>:</span></span><br><span class=\"line\">        self._register_module(cls)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"实例化工厂\">实例化工厂<a href=\"post/Python/Pipeline框架设计-Registry#实例化工厂\"></a></h2><p>为每个类别的模块实例化一个注册工厂</p>\n<figure class=\"highlight python\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> mmdet.utils <span class=\"keyword\">import</span> Registry</span><br><span class=\"line\"></span><br><span class=\"line\">BACKBONES = Registry(<span class=\"string\">'backbone'</span>)</span><br><span class=\"line\">NECKS = Registry(<span class=\"string\">'neck'</span>)</span><br><span class=\"line\">ROI_EXTRACTORS = Registry(<span class=\"string\">'roi_extractor'</span>)</span><br><span class=\"line\">SHARED_HEADS = Registry(<span class=\"string\">'shared_head'</span>)</span><br><span class=\"line\">HEADS = Registry(<span class=\"string\">'head'</span>)</span><br><span class=\"line\">LOSSES = Registry(<span class=\"string\">'loss'</span>)</span><br><span class=\"line\">DETECTORS = Registry(<span class=\"string\">'detector'</span>)</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"注册\">注册<a href=\"post/Python/Pipeline框架设计-Registry#注册\"></a></h2><p>使用注解的形式进行注册</p>\n<figure class=\"highlight python\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@DETECTORS.register_module</span></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">SingleStageDetector</span><span class=\"params\">(BaseDetector)</span>:</span></span><br><span class=\"line\">    ...</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"Pipeline框架Registry设计\">Pipeline框架Registry设计<a href=\"post/Python/Pipeline框架设计-Registry#Pipeline框架Registry设计\"></a></h1><h2 id=\"Registry\">Registry<a href=\"post/Python/Pipeline框架设计-Registry#Registry\"></a></h2><ul>\n<li>使用全称限定名进行注册</li>\n<li>在检索的时候才进行模块的导入(lazy-import)</li>\n</ul>\n<figure class=\"highlight python\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> importlib <span class=\"keyword\">import</span> import_module</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Registry</span><span class=\"params\">()</span>:</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        self._catelog = dict()</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register</span><span class=\"params\">(self, name, fullname)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> name <span class=\"keyword\">not</span> <span class=\"keyword\">in</span> self._catelog</span><br><span class=\"line\">        self._catelog[name] = fullname</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">register_package</span><span class=\"params\">(self, package, *modules)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> module <span class=\"keyword\">in</span> modules:</span><br><span class=\"line\">            self.register(module, package + <span class=\"string\">'.'</span> + module)</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">get</span><span class=\"params\">(self, name)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">assert</span> name <span class=\"keyword\">in</span> self._catelog, <span class=\"string\">\"&#123;&#125; hasn't been registered yet!\"</span>.format(</span><br><span class=\"line\">            name)</span><br><span class=\"line\">        fullname = self._catelog[name]</span><br><span class=\"line\"></span><br><span class=\"line\">        path = fullname.split(<span class=\"string\">\".\"</span>)</span><br><span class=\"line\">        module_name = <span class=\"string\">\".\"</span>.join(path[:<span class=\"number\">-1</span>])</span><br><span class=\"line\">        cls_name = path[<span class=\"number\">-1</span>]</span><br><span class=\"line\"></span><br><span class=\"line\">        module = import_module(module_name)</span><br><span class=\"line\">        cls = getattr(module, cls_name)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">    @property</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">catelog</span><span class=\"params\">(self)</span>:</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> self._catelog</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"注册-1\">注册<a href=\"post/Python/Pipeline框架设计-Registry#注册-1\"></a></h2><figure class=\"highlight python\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">REGISTRY = Registry()</span><br><span class=\"line\"><span class=\"comment\"># Transform</span></span><br><span class=\"line\">REGISTRY.register_package(<span class=\"string\">'mxnet.gluon.data.vision.transforms'</span>,</span><br><span class=\"line\">                          <span class=\"string\">'ToTensor'</span>, <span class=\"string\">'Normalize'</span>, <span class=\"string\">'RandomResizedCrop'</span>,</span><br><span class=\"line\">                          <span class=\"string\">'CenterCrop'</span>, <span class=\"string\">'Resize'</span>, <span class=\"string\">'RandomFlipLeftRight'</span>,</span><br><span class=\"line\">                          <span class=\"string\">'RandomColorJitter'</span>, <span class=\"string\">'RandomLighting'</span>)</span><br><span class=\"line\"><span class=\"comment\"># Dataset</span></span><br><span class=\"line\">REGISTRY.register_package(<span class=\"string\">'mxnet.gluon.data.vision'</span>, <span class=\"string\">'CIFAR10'</span>, <span class=\"string\">'MNIST'</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Model</span></span><br><span class=\"line\">REGISTRY.register_package(<span class=\"string\">'pipeline.model.resnet'</span>, <span class=\"string\">'ResNetV1'</span>, <span class=\"string\">'ResNetV2'</span>)</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"实现用配置文件实例化类\">实现用配置文件实例化类<a href=\"post/Python/Pipeline框架设计-Registry#实现用配置文件实例化类\"></a></h2><ul>\n<li><code>cfg</code>中需包含<code>type</code>字段指明类名（需要注册过）</li>\n<li><strong><code>cfg</code>中可嵌套包含其他类（builder进行递归实例化）</strong></li>\n</ul>\n<figure class=\"highlight python\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">model_config = dict(</span><br><span class=\"line\">    type=<span class=\"string\">'ResNetV1'</span>,</span><br><span class=\"line\">    num_layers=<span class=\"number\">18</span>,</span><br><span class=\"line\">    classes=<span class=\"number\">10</span></span><br><span class=\"line\">)</span><br></pre></td></tr></table></div></figure>\n\n<p><strong>builder</strong></p>\n<figure class=\"highlight python\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">from</span> .registry <span class=\"keyword\">import</span> REGISTRY</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">build</span><span class=\"params\">(cfg)</span>:</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> isinstance(cfg, dict) <span class=\"keyword\">and</span> <span class=\"string\">\"type\"</span> <span class=\"keyword\">in</span> cfg:</span><br><span class=\"line\">        name = cfg.get(<span class=\"string\">\"type\"</span>)</span><br><span class=\"line\">        cls = REGISTRY.get(name)</span><br><span class=\"line\">        params = &#123;&#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span> key, val <span class=\"keyword\">in</span> cfg.items():</span><br><span class=\"line\">            <span class=\"keyword\">if</span> key != <span class=\"string\">'type'</span>:</span><br><span class=\"line\">                params[key] = build(val)</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> cls(**params)</span><br><span class=\"line\">    <span class=\"keyword\">return</span> cfg</span><br></pre></td></tr></table></div></figure>","prev":{"title":"Java集合","link":"post/Java/Java语言/Java集合"},"next":{"title":"SSM整合","link":"post/Java/Spring/SSM整合"},"plink":"https://beginc.github.io/post/Python/Pipeline框架设计-Registry/","toc":[{"title":"设计目的","id":"设计目的","index":"1"},{"title":"mmdet的实现","id":"mmdet的实现","index":"2","children":[{"title":"Registry类","id":"Registry类","index":"2.1"},{"title":"实例化工厂","id":"实例化工厂","index":"2.2"},{"title":"注册","id":"注册","index":"2.3"}]},{"title":"Pipeline框架Registry设计","id":"Pipeline框架Registry设计","index":"3","children":[{"title":"Registry","id":"Registry","index":"3.1"},{"title":"注册","id":"注册-1","index":"3.2"},{"title":"实现用配置文件实例化类","id":"实现用配置文件实例化类","index":"3.3"}]}]}