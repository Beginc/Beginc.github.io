{"title":"MIPS-Like单周期16位CPU设计","date":"2019-09-09T15:48:42.000Z","thumbnail":"/post/MIPS-Like单周期CPU设计/cover.jpg","link":"post/MIPS-Like单周期CPU设计","tags":["CPU"],"categories":["System Architecture"],"updated":"2019-09-09T16:18:53.961Z","content":"<p>由于课程设计的需要，利用<code>Verilog</code>实现了一个类MIPS的单周期CPU。</p>\n<h1 id=\"指令集\">指令集<a href=\"post/MIPS-Like单周期CPU设计#指令集\"></a></h1><h2 id=\"R型\">R型<a href=\"post/MIPS-Like单周期CPU设计#R型\"></a></h2><p>寄存器操作型指令，三个操作数都为寄存器。</p>\n<p><strong>指令格式</strong><br>OpType(2位) FuncType(5位) R1(3位) R2(3位) R3(3位)</p>\n<p><strong>实现指令</strong></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADDR  r1, r2, r3(r1 + r2   ---&gt; r3) 加法</span><br><span class=\"line\">SUBR  r1, r2, r3(r1 - r2   ---&gt; r3) 减法</span><br><span class=\"line\">LSLR  r1, r2, r3(r1 &lt;&lt; r2  ---&gt; r3) 逻辑左移</span><br><span class=\"line\">LSRR  r1, r2, r3(r1 &gt;&gt; r2  ---&gt; r3) 逻辑右移</span><br><span class=\"line\">ASLR  r1, r2, r3(r1 &lt;&lt;&lt; r2 ---&gt; r3) 算术左移</span><br><span class=\"line\">ASRR  r1, r2, r3(r1 &gt;&gt;&gt; r2 ---&gt; r3) 算术右移</span><br><span class=\"line\">ANDR  r1, r2, r3(r1 and r2 ---&gt; r3) 按位与</span><br><span class=\"line\">ORR   r1, r2, r3(r1 or r2  ---&gt; r3) 按位或</span><br><span class=\"line\">MOVR  r1, .., r3(r1 ---&gt; r3)        转存</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"I型\">I型<a href=\"post/MIPS-Like单周期CPU设计#I型\"></a></h2><p>寄存器与立即数混合运算。</p>\n<p><strong>指令格式</strong><br>OpType(2位) FuncType(5位) R1(3位) IConst(3位) R3(3位)</p>\n<p><strong>实现指令</strong></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADDI  r1, r2,    r3(r1 + r2   ---&gt; r3)    加法</span><br><span class=\"line\">SUBI  r1, r2,    r3(r1 - r2   ---&gt; r3)    减法</span><br><span class=\"line\">LSLI  r1, r2,    r3(r1 &lt;&lt; r2  ---&gt; r3)    逻辑左移</span><br><span class=\"line\">LSRI  r1, r2,    r3(r1 &gt;&gt; r2  ---&gt; r3)    逻辑右移</span><br><span class=\"line\">ASLI  r1, r2,    r3(r1 &lt;&lt;&lt; r2 ---&gt; r3)    算术左移</span><br><span class=\"line\">ASRI  r1, r2,    r3(r1 &gt;&gt;&gt; r2 ---&gt; r3)    算术右移</span><br><span class=\"line\">ANDI  r1, r2,    r3(r1 and r2 ---&gt; r3)    按位与</span><br><span class=\"line\">ORI   r1, r2,    r3(r1 or r2  ---&gt; r3)    按位或</span><br><span class=\"line\">MOVI  .., const, r3(const ---&gt; r3)        转存</span><br><span class=\"line\">LOAD  r1, const, r3(M[r1 + const] ---&gt; r3)读数据内存</span><br><span class=\"line\">STORE r1, const, r3(r3 ---&gt; M[r1 + const])写数据内存</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"J型\">J型<a href=\"post/MIPS-Like单周期CPU设计#J型\"></a></h2><p>执行跳转指令。</p>\n<p><strong>指令格式</strong><br>OpType(2位) FuncType(5位) JConst(9位)</p>\n<p><strong>实现指令</strong></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JMP const</span><br><span class=\"line\">JE  const</span><br><span class=\"line\">JL  const</span><br><span class=\"line\">JG  const</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"寄存器设置\">寄存器设置<a href=\"post/MIPS-Like单周期CPU设计#寄存器设置\"></a></h1><ul>\n<li>R1-R8八个16位寄存器</li>\n<li>PSW程序状态字(Z.S)</li>\n</ul>\n<h1 id=\"存储器实现\">存储器实现<a href=\"post/MIPS-Like单周期CPU设计#存储器实现\"></a></h1><p>由于采用数据存储器、指令存储器分离，因此需分别实现两种存储器。</p>\n<h2 id=\"指令寄存器\">指令寄存器<a href=\"post/MIPS-Like单周期CPU设计#指令寄存器\"></a></h2><p>指令存储器为只读存储器。</p>\n<p><strong>端口定义</strong></p>\n<ul>\n<li>reset复位信号</li>\n<li>instAddr即PC取指令地址</li>\n<li>inst为取出的指令</li>\n</ul>\n<figure class=\"highlight verilog\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">include</span> \"config.v\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> InstMemory(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`INST_ADDR_WIDTH] instAddr,</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span>[<span class=\"meta\">`INST_WIDTH] inst</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">reg</span>[<span class=\"meta\">`INST_WIDTH] data[`INST_ADDR_WIDTH];</span></span><br><span class=\"line\"><span class=\"keyword\">integer</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Reset</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetEnable) begin</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(index=<span class=\"number\">0</span>;index&lt;<span class=\"meta\">`INST_MAX_NUM;index=index+1)</span></span><br><span class=\"line\">            data[index] &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetEnable)</span></span><br><span class=\"line\">        inst = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        inst = data[instAddr];</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"数据存储器\">数据存储器<a href=\"post/MIPS-Like单周期CPU设计#数据存储器\"></a></h2><p><strong>端口定义</strong></p>\n<ul>\n<li>clk为时钟信号</li>\n<li>reset复位信号</li>\n<li>dataMemWR控制写入还是读出</li>\n<li>dataMemWriteEnable写使能</li>\n<li>dataMemAddr相当于MAR</li>\n<li>dataMemIn要写入的数据</li>\n<li>dataMemOut读出的数据</li>\n</ul>\n<figure class=\"highlight verilog\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">include</span> \"config.v\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> DataMemory(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> dataMemWR,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> dataMemWriteEnable,</span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`DATA_ADDR_WIDTH] dataMemAddr,</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`DATA_WIDTH] dataMemIn,</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span>[<span class=\"meta\">`DATA_WIDTH] dataMemOut</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">reg</span>[<span class=\"meta\">`DATA_WIDTH] data[`DATA_ADDR_WIDTH];</span></span><br><span class=\"line\"><span class=\"keyword\">integer</span> index;</span><br><span class=\"line\"><span class=\"comment\">// Reset</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetEnable) begin</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(index=<span class=\"number\">0</span>;index&lt;<span class=\"meta\">`DATA_MAX_NUM;index=index+1)</span></span><br><span class=\"line\">            data[index] &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetEnable)</span></span><br><span class=\"line\">        dataMemOut &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dataMemWR == <span class=\"meta\">`READ)</span></span><br><span class=\"line\">            dataMemOut &lt;= data[dataMemAddr];</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Write</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetDisable) begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((dataMemWR == <span class=\"meta\">`WRITE) &amp;&amp; (dataMemWriteEnable == `WRITE_ENABLE))</span></span><br><span class=\"line\">            data[dataMemAddr] = dataMemIn;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></div></figure>","next":{"title":"VirtualBox下CentOS克隆","link":"post/VirtualBox下CentOS克隆"},"plink":"https://beginc.github.io/post/MIPS-Like单周期CPU设计/","toc":[{"title":"指令集","id":"指令集","index":"1","children":[{"title":"R型","id":"R型","index":"1.1"},{"title":"I型","id":"I型","index":"1.2"},{"title":"J型","id":"J型","index":"1.3"}]},{"title":"寄存器设置","id":"寄存器设置","index":"2"},{"title":"存储器实现","id":"存储器实现","index":"3","children":[{"title":"指令寄存器","id":"指令寄存器","index":"3.1"},{"title":"数据存储器","id":"数据存储器","index":"3.2"}]}]}