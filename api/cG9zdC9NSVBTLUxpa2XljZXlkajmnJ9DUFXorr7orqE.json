{"title":"MIPS-Like单周期16位CPU设计","date":"2019-09-09T15:48:42.000Z","thumbnail":"/post/MIPS-Like单周期CPU设计/cover.jpg","link":"post/MIPS-Like单周期CPU设计","tags":["CPU"],"categories":["System Architecture"],"updated":"2019-09-10T07:49:55.868Z","content":"<p>由于课程设计的需要，利用<code>Verilog</code>实现了一个类MIPS的单周期CPU。</p>\n<h1 id=\"指令集\">指令集<a href=\"post/MIPS-Like单周期CPU设计#指令集\"></a></h1><h2 id=\"R型\">R型<a href=\"post/MIPS-Like单周期CPU设计#R型\"></a></h2><p>寄存器操作型指令，三个操作数都为寄存器。</p>\n<p><strong>指令格式</strong><br>OpType(2位) FuncType(5位) R1(3位) R2(3位) R3(3位)</p>\n<p><strong>实现指令</strong></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADDR  r1, r2, r3(r1 + r2   ---&gt; r3) 加法</span><br><span class=\"line\">SUBR  r1, r2, r3(r1 - r2   ---&gt; r3) 减法</span><br><span class=\"line\">LSLR  r1, r2, r3(r1 &lt;&lt; r2  ---&gt; r3) 逻辑左移</span><br><span class=\"line\">LSRR  r1, r2, r3(r1 &gt;&gt; r2  ---&gt; r3) 逻辑右移</span><br><span class=\"line\">ASLR  r1, r2, r3(r1 &lt;&lt;&lt; r2 ---&gt; r3) 算术左移</span><br><span class=\"line\">ASRR  r1, r2, r3(r1 &gt;&gt;&gt; r2 ---&gt; r3) 算术右移</span><br><span class=\"line\">ANDR  r1, r2, r3(r1 and r2 ---&gt; r3) 按位与</span><br><span class=\"line\">ORR   r1, r2, r3(r1 or r2  ---&gt; r3) 按位或</span><br><span class=\"line\">MOVR  r1, .., r3(r1 ---&gt; r3)        转存</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"I型\">I型<a href=\"post/MIPS-Like单周期CPU设计#I型\"></a></h2><p>寄存器与立即数混合运算。</p>\n<p><strong>指令格式</strong><br>OpType(2位) FuncType(5位) R1(3位) IConst(3位) R3(3位)</p>\n<p><strong>实现指令</strong></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADDI  r1, const, r3(r1 + r2   ---&gt; r3)    加法</span><br><span class=\"line\">SUBI  r1, const, r3(r1 - r2   ---&gt; r3)    减法</span><br><span class=\"line\">LSLI  r1, const, r3(r1 &lt;&lt; r2  ---&gt; r3)    逻辑左移</span><br><span class=\"line\">LSRI  r1, const, r3(r1 &gt;&gt; r2  ---&gt; r3)    逻辑右移</span><br><span class=\"line\">ASLI  r1, const, r3(r1 &lt;&lt;&lt; r2 ---&gt; r3)    算术左移</span><br><span class=\"line\">ASRI  r1, const, r3(r1 &gt;&gt;&gt; r2 ---&gt; r3)    算术右移</span><br><span class=\"line\">ANDI  r1, const, r3(r1 and r2 ---&gt; r3)    按位与</span><br><span class=\"line\">ORI   r1, const, r3(r1 or r2  ---&gt; r3)    按位或</span><br><span class=\"line\">MOVI  .., const, r3(const ---&gt; r3)        转存</span><br><span class=\"line\">LOAD  r1, const, r3(M[r1 + const] ---&gt; r3)读数据内存</span><br><span class=\"line\">STORE r1, const, r3(r3 ---&gt; M[r1 + const])写数据内存</span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"J型\">J型<a href=\"post/MIPS-Like单周期CPU设计#J型\"></a></h2><p>执行跳转指令。</p>\n<p><strong>指令格式</strong><br>OpType(2位) FuncType(5位) JConst(9位)</p>\n<p><strong>实现指令</strong></p>\n<figure class=\"highlight plain\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">JMP const</span><br><span class=\"line\">JE  const</span><br><span class=\"line\">JL  const</span><br><span class=\"line\">JG  const</span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"寄存器设置\">寄存器设置<a href=\"post/MIPS-Like单周期CPU设计#寄存器设置\"></a></h1><ul>\n<li>R1-R8八个16位寄存器</li>\n<li>PSW程序状态字(Z.S)</li>\n</ul>\n<h1 id=\"配置文件\">配置文件<a href=\"post/MIPS-Like单周期CPU设计#配置文件\"></a></h1><figure class=\"highlight verilog\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// 字长</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> WORD_WIDTH 15:0</span></span><br><span class=\"line\"><span class=\"comment\">// PSW宽度</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> PSW_WIDTH 1:0</span></span><br><span class=\"line\"><span class=\"comment\">// PSW位选择</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> PSW_Z_SEL 0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> PSW_S_SEL 1</span></span><br><span class=\"line\"><span class=\"comment\">// S标志正负</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> PSW_S_NEG 1</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> PSW_S_POS 0</span></span><br><span class=\"line\"><span class=\"comment\">// 复位</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> ChipResetEnable  1</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> ChipResetDisable 0</span></span><br><span class=\"line\"><span class=\"comment\">// 寄存器数量</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> REG_MAX_NUM    8</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> REG_ADDR_WIDTH 7:0</span></span><br><span class=\"line\"><span class=\"comment\">// 寄存器宽度</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> REG_WIDTH      15:0</span></span><br><span class=\"line\"><span class=\"comment\">// 读写信号</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> READ  0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> WRITE 1</span></span><br><span class=\"line\"><span class=\"comment\">// 数据存储器数量</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> DATA_MAX_NUM    8</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> DATA_ADDR_WIDTH 7:0</span></span><br><span class=\"line\"><span class=\"comment\">// 数据存储器宽度</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> DATA_WIDTH      15:0</span></span><br><span class=\"line\"><span class=\"comment\">// 指令存储器数量</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> INST_MAX_NUM    16</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> INST_ADDR_WIDTH 15:0</span></span><br><span class=\"line\"><span class=\"comment\">// 指令存储器宽度</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> INST_WIDTH      15:0</span></span><br><span class=\"line\"><span class=\"comment\">// 指令格式</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> OP_TYPE_WIDTH   1:0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_TYPE_WIDTH 4:0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> I_CONST_WIDTH   2:0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> J_CONST_WIDTH   8:0</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> OP_TYPE_SEL   15:14</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_TYPE_SEL 13:9</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> R1_SEL         8:6</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> R2_SEL         5:3</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> R3_SEL         2:0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> I_CONST_SEL    5:3</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> J_CONST_SEL    8:0</span></span><br><span class=\"line\"><span class=\"comment\">// 操作码</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> OP_R 2'b00</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> OP_I 2'b01</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> OP_J 2'b10</span></span><br><span class=\"line\"><span class=\"comment\">// 功能码</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ADDR 5'b00000</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_SUBR 5'b00001</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_LSLR 5'b00010</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_LSRR 5'b00011</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ASLR 5'b00100</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ASRR 5'b00101</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ANDR 5'b00110</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ORR  5'b00111</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_MOVR 5'b01000</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ADDI  5'b00000</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_SUBI  5'b00001</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_LSLI  5'b00010</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_LSRI  5'b00011</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ASLI  5'b00100</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ASRI  5'b00101</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ANDI  5'b00110</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_ORI   5'b00111</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_MOVI  5'b01000</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_LOAD  5'b01001</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_STORE 5'b01010</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_JMP 5'b00000</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_JE  5'b00001</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_JL  5'b00010</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> FUNC_JG  5'b00011</span></span><br><span class=\"line\"><span class=\"comment\">// 位扩展模式</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> ZERO_EXTEND   0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> SIGN_EXTEND   1</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 控制器控制信号</span></span><br><span class=\"line\"><span class=\"comment\">// ALU OP2 Selection</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> ALU_OP2_ICONST 1</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> ALU_OP2_R2 0</span></span><br><span class=\"line\"><span class=\"comment\">// Register Write Data Selection</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> REG_WRITE_ALU_OUT 0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> REG_WRITE_R1 1</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> REG_WRITE_ICONST 2</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> REG_WRITE_MEM 3</span></span><br><span class=\"line\"><span class=\"comment\">// Register Read Port2 Address Selection</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> REG_PORT2_ADDR_R2 0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> REG_PORT2_ADDR_R3 1</span></span><br><span class=\"line\"><span class=\"comment\">// Write Enable</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> WRITE_ENABLE 1</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> WRITE_DISABLE 0</span></span><br><span class=\"line\"><span class=\"comment\">// PC Delta Selection</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> PC_DELTA_1 0</span></span><br><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">define</span> PC_DELTA_J 1</span></span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"基础部件实现\">基础部件实现<a href=\"post/MIPS-Like单周期CPU设计#基础部件实现\"></a></h1><h2 id=\"存储器实现\">存储器实现<a href=\"post/MIPS-Like单周期CPU设计#存储器实现\"></a></h2><p>由于采用数据存储器、指令存储器分离，因此需分别实现两种存储器。</p>\n<h3 id=\"指令寄存器\">指令寄存器<a href=\"post/MIPS-Like单周期CPU设计#指令寄存器\"></a></h3><p>指令存储器为只读存储器。</p>\n<p><strong>端口定义</strong></p>\n<ul>\n<li>reset复位信号</li>\n<li>instAddr即PC取指令地址</li>\n<li>inst为取出的指令</li>\n</ul>\n<figure class=\"highlight verilog\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">include</span> \"config.v\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> InstMemory(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`INST_ADDR_WIDTH] instAddr,</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span>[<span class=\"meta\">`INST_WIDTH] inst</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">reg</span>[<span class=\"meta\">`INST_WIDTH] data[`INST_ADDR_WIDTH];</span></span><br><span class=\"line\"><span class=\"keyword\">integer</span> index;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Reset</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetEnable) begin</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(index=<span class=\"number\">0</span>;index&lt;<span class=\"meta\">`INST_MAX_NUM;index=index+1)</span></span><br><span class=\"line\">            data[index] &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">        </span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetEnable)</span></span><br><span class=\"line\">        inst = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        inst = data[instAddr];</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></div></figure>\n\n<h3 id=\"数据存储器\">数据存储器<a href=\"post/MIPS-Like单周期CPU设计#数据存储器\"></a></h3><p><strong>端口定义</strong></p>\n<ul>\n<li>clk为时钟信号</li>\n<li>reset复位信号</li>\n<li>dataMemWR控制写入还是读出</li>\n<li>dataMemWriteEnable写使能</li>\n<li>dataMemAddr相当于MAR</li>\n<li>dataMemIn要写入的数据</li>\n<li>dataMemOut读出的数据</li>\n</ul>\n<figure class=\"highlight verilog\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">include</span> \"config.v\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> DataMemory(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> dataMemWR,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> dataMemWriteEnable,</span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`DATA_ADDR_WIDTH] dataMemAddr,</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`DATA_WIDTH] dataMemIn,</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span>[<span class=\"meta\">`DATA_WIDTH] dataMemOut</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">reg</span>[<span class=\"meta\">`DATA_WIDTH] data[`DATA_ADDR_WIDTH];</span></span><br><span class=\"line\"><span class=\"keyword\">integer</span> index;</span><br><span class=\"line\"><span class=\"comment\">// Reset</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetEnable) begin</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(index=<span class=\"number\">0</span>;index&lt;<span class=\"meta\">`DATA_MAX_NUM;index=index+1)</span></span><br><span class=\"line\">            data[index] &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Read</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetEnable)</span></span><br><span class=\"line\">        dataMemOut &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>(dataMemWR == <span class=\"meta\">`READ)</span></span><br><span class=\"line\">            dataMemOut &lt;= data[dataMemAddr];</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// Write</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetDisable) begin</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span>((dataMemWR == <span class=\"meta\">`WRITE) &amp;&amp; (dataMemWriteEnable == `WRITE_ENABLE))</span></span><br><span class=\"line\">            data[dataMemAddr] = dataMemIn;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"寄存器组实现\">寄存器组实现<a href=\"post/MIPS-Like单周期CPU设计#寄存器组实现\"></a></h2><ul>\n<li>clk时钟信号</li>\n<li>reset复位信号</li>\n<li>registerWR寄存器读写模式</li>\n<li>registerWriteEnable寄存器写使能</li>\n<li>r1Addr读端口1地址</li>\n<li>r2Addr读端口2地址</li>\n<li>r1Data读端口1输出数据</li>\n<li>r2Data读端口2输出数据</li>\n<li>wRegAddr写端口地址</li>\n<li>wRegData待写数据</li>\n</ul>\n<figure class=\"highlight verilog\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">include</span> \"config.v\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> Register(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> clk,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> reset,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> registerWR,</span><br><span class=\"line\">    <span class=\"keyword\">input</span> registerWriteEnable,</span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`REG_ADDR_WIDTH] r1Addr,</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`REG_ADDR_WIDTH] r2Addr,</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"meta\">`REG_WIDTH] r1Data,</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span> [<span class=\"meta\">`REG_WIDTH] r2Data,</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`REG_ADDR_WIDTH] wRegAddr,</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`REG_WIDTH] wRegData</span></span><br><span class=\"line\">);</span><br><span class=\"line\"><span class=\"keyword\">reg</span>[<span class=\"meta\">`REG_WIDTH] regs[`REG_ADDR_WIDTH];</span></span><br><span class=\"line\"><span class=\"keyword\">integer</span> index;</span><br><span class=\"line\"><span class=\"comment\">// 初始复位清空数据</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(reset == <span class=\"meta\">`ChipResetEnable) begin</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span>(index=<span class=\"number\">0</span>;index&lt;<span class=\"meta\">`REG_MAX_NUM;index=index+1)</span></span><br><span class=\"line\">            regs[index]=<span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 读端口1</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((reset == <span class=\"meta\">`ChipResetEnable))</span></span><br><span class=\"line\">        r1Data &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">        r1Data &lt;= regs[r1Addr];</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">// 读端口2</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((reset == <span class=\"meta\">`ChipResetEnable))</span></span><br><span class=\"line\">        r2Data &lt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">else</span> <span class=\"keyword\">begin</span></span><br><span class=\"line\">        r2Data &lt;= regs[r2Addr];</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"comment\">// 写端口</span></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(<span class=\"keyword\">posedge</span> clk) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>((reset == <span class=\"meta\">`ChipResetDisable) &amp;&amp; (registerWR == `WRITE) &amp;&amp; (registerWriteEnable == `WRITE_ENABLE))</span></span><br><span class=\"line\">        regs[wRegAddr] &lt;= wRegData;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"二路选择器实现\">二路选择器实现<a href=\"post/MIPS-Like单周期CPU设计#二路选择器实现\"></a></h2><p>在输入的两路信号中选择一路输出。</p>\n<ul>\n<li>sel选择信号</li>\n<li>muxIn1输入1</li>\n<li>muxIn2输入2</li>\n<li>muxOut输出</li>\n</ul>\n<figure class=\"highlight verilog\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">include</span> \"config.v\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> Mux2(</span><br><span class=\"line\">    <span class=\"keyword\">input</span> sel,</span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`WORD_WIDTH] muxIn1,</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`WORD_WIDTH] muxIn2,</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span>[<span class=\"meta\">`WORD_WIDTH] muxOut</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(sel == <span class=\"number\">0</span>) <span class=\"keyword\">begin</span></span><br><span class=\"line\">        muxOut &lt;= muxIn1;</span><br><span class=\"line\">    <span class=\"keyword\">end</span></span><br><span class=\"line\">    <span class=\"keyword\">else</span></span><br><span class=\"line\">        muxOut &lt;= muxIn2;</span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></div></figure>\n\n<h2 id=\"四路选择器实现\">四路选择器实现<a href=\"post/MIPS-Like单周期CPU设计#四路选择器实现\"></a></h2><p>在输入的四路信号中选择一路输出</p>\n<ul>\n<li>sel选择信号</li>\n<li>muxIn1输入1</li>\n<li>muxIn2输入2</li>\n<li>muxIn3输入3</li>\n<li>muxIn4输入4</li>\n<li>muxOut输出</li>\n</ul>\n<figure class=\"highlight verilog\"><div><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">`<span class=\"meta-keyword\">include</span> \"config.v\"</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">module</span> Mux4(</span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"number\">1</span>:<span class=\"number\">0</span>] sel,</span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`WORD_WIDTH] muxIn1,</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`WORD_WIDTH] muxIn2,</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`WORD_WIDTH] muxIn3,</span></span><br><span class=\"line\">    <span class=\"keyword\">input</span>[<span class=\"meta\">`WORD_WIDTH] muxIn4,</span></span><br><span class=\"line\">    <span class=\"keyword\">output</span> <span class=\"keyword\">reg</span>[<span class=\"meta\">`WORD_WIDTH] muxOut</span></span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">always</span>@(*) <span class=\"keyword\">begin</span></span><br><span class=\"line\">    <span class=\"keyword\">case</span>(sel)</span><br><span class=\"line\">        <span class=\"number\">0</span>: muxOut &lt;= muxIn1;</span><br><span class=\"line\">        <span class=\"number\">1</span>: muxOut &lt;= muxIn2;</span><br><span class=\"line\">        <span class=\"number\">2</span>: muxOut &lt;= muxIn3;</span><br><span class=\"line\">        <span class=\"number\">3</span>: muxOut &lt;= muxIn4;</span><br><span class=\"line\">    <span class=\"keyword\">endcase</span></span><br><span class=\"line\"><span class=\"keyword\">end</span></span><br><span class=\"line\"><span class=\"keyword\">endmodule</span></span><br></pre></td></tr></table></div></figure>\n\n<h1 id=\"数据通路实现\">数据通路实现<a href=\"post/MIPS-Like单周期CPU设计#数据通路实现\"></a></h1><p>实现完一些基础部件后，开始对数据通路进行实现。</p>\n<p><strong>最全数据通路</strong><br>先列出最全的数据通路，而对于不同的指令，其数据通路将为下面数据通路的子集，需要使用控制器进行相应的信号控制。</p>\n<ol>\n<li>依据PC取指令</li>\n<li>对指令译码，得出指令的各个组成部分<ul>\n<li>OPType</li>\n<li>FuncType</li>\n<li>R1Addr</li>\n<li>R2Addr</li>\n<li>R3Addr</li>\n<li>IConst(I型指令的立即数，需要进行位扩展到寄存器宽度)</li>\n<li>JConst(J型指令的立即数，需要进行位扩展到寄存器宽度)</li>\n</ul>\n</li>\n<li>读寄存器(R型和I型指令需要读寄存器)</li>\n<li>ALU运算(R型和I型指令需要ALU运算)</li>\n<li>数据存储器访问<ul>\n<li>写内存(STORE指令)</li>\n<li>读内存(LOAD指令)</li>\n</ul>\n</li>\n<li>写寄存器(R型指令和I型指令需要写寄存器)</li>\n<li>改变PC<ul>\n<li>+1(对于R型指令和I型指令，PC加1，继续顺序执行)</li>\n<li>JConst + PC + 1(J型指令跳转，修改PC)</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"数据通路分析\">数据通路分析<a href=\"post/MIPS-Like单周期CPU设计#数据通路分析\"></a></h2><h3 id=\"R型指令\">R型指令<a href=\"post/MIPS-Like单周期CPU设计#R型指令\"></a></h3><p><strong>除MOVR指令外</strong></p>\n<ol>\n<li>依据PC取指令</li>\n<li>对指令译码，得出指令的各个组成部分<ul>\n<li>OPType</li>\n<li>FuncType</li>\n<li>R1Addr</li>\n<li>R2Addr</li>\n<li>R3Addr</li>\n</ul>\n</li>\n<li>读寄存器<ul>\n<li>registerWR读模式</li>\n<li>registerWriteEnable禁止</li>\n<li>用R1Addr地址读出数据到R1Data</li>\n<li>用R2Addr地址读出数据到R2Data</li>\n</ul>\n</li>\n<li>ALU运算<ul>\n<li>ALUOp1为R1Data</li>\n<li>ALUOp2为R2Data</li>\n</ul>\n</li>\n<li>写寄存器<ul>\n<li>registerWR写模式</li>\n<li>registerWriteEnable允许</li>\n<li>用R3Addr作为写地址，将ALUOut写入寄存器</li>\n</ul>\n</li>\n<li>PC + 1</li>\n</ol>\n<p><strong>MOVR指令</strong><br>MOVR指令不同于其他R型指令，它无需进行ALU运算。</p>\n<ol>\n<li>依据PC取指令</li>\n<li>对指令译码，得出指令的各个组成部分<ul>\n<li>OPType</li>\n<li>FuncType</li>\n<li>R1Addr</li>\n<li>……(无作用)</li>\n<li>R3Addr</li>\n</ul>\n</li>\n<li>读寄存器<ul>\n<li>registerWR读模式</li>\n<li>registerWriteEnable禁止</li>\n<li>用R1Addr地址读出数据到R1Data</li>\n</ul>\n</li>\n<li>写寄存器<ul>\n<li>registerWR写模式</li>\n<li>registerWriteEnable允许</li>\n<li>用R3Addr作为写地址，将R1Data写入寄存器</li>\n</ul>\n</li>\n<li>PC + 1</li>\n</ol>\n<p><strong>冲突分析</strong></p>\n<ol>\n<li>MOVR指令无需进行ALU运算，因此在设计ALU时，当见到MOVR指令时，无需进行计算</li>\n<li>MOVR指令使用R1Data写入寄存器地址R3Data处，而其他指令使用ALUOut写入寄存器地址R3Data处，<strong>因此需添加一个多路选择器，用控制信号wRegDataSel来选择写入寄存器的数据来源</strong></li>\n</ol>\n<h3 id=\"I型指令\">I型指令<a href=\"post/MIPS-Like单周期CPU设计#I型指令\"></a></h3><p><strong>除MOVI, LOAD, STORE外</strong></p>\n<ol>\n<li>依据PC取指令</li>\n<li>对指令译码，得出指令的各个组成部分<ul>\n<li>OPType</li>\n<li>FuncType</li>\n<li>R1Addr</li>\n<li>IConst(I型指令的立即数，需要进行位扩展到寄存器宽度)</li>\n<li>R3Addr</li>\n</ul>\n</li>\n<li>位扩展(将IConst进行位扩展)<ul>\n<li>移位指令需要<strong>零扩展</strong></li>\n<li>其他运算指令需要<strong>符号扩展</strong></li>\n</ul>\n</li>\n<li>读寄存器<ul>\n<li>registerWR读模式</li>\n<li>registerWriteEnable禁止</li>\n<li>用R1Addr地址读出数据到R1Data</li>\n</ul>\n</li>\n<li>ALU运算<ul>\n<li>ALUOp1为R1Data</li>\n<li>ALUOp2为位扩展后的IConst</li>\n</ul>\n</li>\n<li>写寄存器<ul>\n<li>registerWR写模式</li>\n<li>registerWriteEnable允许</li>\n<li>用R3Addr作为写地址，将ALUOut写入寄存器</li>\n</ul>\n</li>\n<li>PC + 1</li>\n</ol>\n<p><strong>MOVI指令</strong></p>\n<ol>\n<li>依据PC取指令</li>\n<li>对指令译码，得出指令的各个组成部分<ul>\n<li>OPType</li>\n<li>FuncType</li>\n<li>IConst(I型指令的立即数，需要进行位扩展到寄存器宽度)</li>\n<li>R3Addr</li>\n</ul>\n</li>\n<li>位扩展(将IConst进行位扩展)<ul>\n<li><strong>符号扩展</strong></li>\n</ul>\n</li>\n<li>写寄存器<ul>\n<li>registerWR写模式</li>\n<li>registerWriteEnable允许</li>\n<li>用R3Addr作为写地址，将位扩展后的IConst写入寄存器</li>\n</ul>\n</li>\n<li>PC + 1</li>\n</ol>\n<p><strong>LOAD指令</strong></p>\n<ol>\n<li>依据PC取指令</li>\n<li>对指令译码，得出指令的各个组成部分<ul>\n<li>OPType</li>\n<li>FuncType</li>\n<li>R1Addr</li>\n<li>IConst(I型指令的立即数，需要进行位扩展到寄存器宽度)</li>\n<li>R3Addr</li>\n</ul>\n</li>\n<li>位扩展(将IConst进行位扩展)<ul>\n<li><strong>符号扩展</strong></li>\n</ul>\n</li>\n<li>ALU运算<ul>\n<li>ALUOp1为R1Data</li>\n<li>ALUOp2为位扩展后的IConst</li>\n</ul>\n</li>\n<li>数据存储器访问<ul>\n<li></li>\n</ul>\n</li>\n</ol>\n<p><strong>STORE指令</strong></p>\n","prev":{"title":"Leetcode-53 Maximun Array","link":"post/Leetcode-53"},"next":{"title":"VirtualBox下CentOS克隆","link":"post/VirtualBox下CentOS克隆"},"plink":"https://beginc.github.io/post/MIPS-Like单周期CPU设计/","toc":[{"title":"指令集","id":"指令集","index":"1","children":[{"title":"R型","id":"R型","index":"1.1"},{"title":"I型","id":"I型","index":"1.2"},{"title":"J型","id":"J型","index":"1.3"}]},{"title":"寄存器设置","id":"寄存器设置","index":"2"},{"title":"配置文件","id":"配置文件","index":"3"},{"title":"基础部件实现","id":"基础部件实现","index":"4","children":[{"title":"存储器实现","id":"存储器实现","index":"4.1","children":[{"title":"指令寄存器","id":"指令寄存器","index":"4.1.1"},{"title":"数据存储器","id":"数据存储器","index":"4.1.2"}]},{"title":"寄存器组实现","id":"寄存器组实现","index":"4.2"},{"title":"二路选择器实现","id":"二路选择器实现","index":"4.3"},{"title":"四路选择器实现","id":"四路选择器实现","index":"4.4"}]},{"title":"数据通路实现","id":"数据通路实现","index":"5","children":[{"title":"数据通路分析","id":"数据通路分析","index":"5.1","children":[{"title":"R型指令","id":"R型指令","index":"5.1.1"},{"title":"I型指令","id":"I型指令","index":"5.1.2"}]}]}]}