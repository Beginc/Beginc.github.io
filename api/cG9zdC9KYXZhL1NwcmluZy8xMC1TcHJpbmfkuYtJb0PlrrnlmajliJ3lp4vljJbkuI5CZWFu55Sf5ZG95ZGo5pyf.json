{"title":"10-Spring之IoC容器初始化与Bean生命周期","date":"2020-03-02T15:22:14.000Z","date_formatted":{"ll":"Mar 2, 2020","L":"03/02/2020","MM-DD":"03-02"},"thumbnail":"post/Java/Spring/10-Spring之IoC容器初始化与Bean生命周期/cover.png","link":"post/Java/Spring/10-Spring之IoC容器初始化与Bean生命周期","categories":["Java","Spring"],"updated":"2020-03-03T05:44:01.048Z","content":"<h1 id=\"ioc容器初始化\">IoC容器初始化<a href=\"#ioc容器初始化\" title=\"IoC容器初始化\"></a></h1><p>所以的步骤都在AbstractApplicationContext.refresh()方法中。</p>\n<img src=\"/post/Java/Spring/10-Spring%E4%B9%8BIoC%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8EBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/image-20200303001702265.png\" class=\"\">\n\n<h2 id=\"preparerefresh\">prepareRefresh<a href=\"#preparerefresh\" title=\"prepareRefresh\"></a></h2><ol><li>记录启动时间</li>\n<li>设置启动状态</li>\n<li>加载Properties文件</li>\n</ol><h2 id=\"obtainfreshbeanfactory\">obtainFreshBeanFactory<a href=\"#obtainfreshbeanfactory\" title=\"obtainFreshBeanFactory\"></a></h2><ol><li>创建BeanFactory(DefaultListableBeanFactory)</li>\n<li>如果是XML一派的ApplicationContext的话还会在此处加载BeanDefinition</li>\n</ol><h2 id=\"preparebeanfactory\">prepareBeanFactory<a href=\"#preparebeanfactory\" title=\"prepareBeanFactory\"></a></h2><ol><li>给BeanFactory做了一些设置和注入</li>\n</ol><h2 id=\"postprocessbeanfactory\">postProcessBeanFactory<a href=\"#postprocessbeanfactory\" title=\"postProcessBeanFactory\"></a></h2><p>允许子类重写改方法对BeanFactory进行后处理，此处为空方法。</p>\n<h2 id=\"invokebeanfactorypostprocessors\">invokeBeanFactoryPostProcessors<a href=\"#invokebeanfactorypostprocessors\" title=\"invokeBeanFactoryPostProcessors\"></a></h2><ol><li><p>调用实现了PriorityOrdered接口的BeanDefinitionRegistryPostProcessor</p>\n</li>\n<li><p>调用实现了Ordered接口的BeanDefinitionRegistryPostProcessor</p>\n</li>\n<li><p>调用普通的BeanDefinitionRegistryPostProcessor</p>\n</li>\n<li><p>调用实现了PriorityOrdered接口的BeanFactoryPostProcessor</p>\n</li>\n<li><p>调用实现了Ordered接口的BeanFactoryPostProcessor</p>\n</li>\n<li><p>调用普通的BeanFactoryPostProcessor</p>\n</li>\n</ol><h2 id=\"registerbeanpostprocessors\">registerBeanPostProcessors<a href=\"#registerbeanpostprocessors\" title=\"registerBeanPostProcessors\"></a></h2><ol><li>注册实现了PriorityOrdered接口的BeanPostProcessor</li>\n<li>注册实现了Ordered接口的BeanPostProcessor</li>\n<li>注册普通的BeanPostProcessor</li>\n<li>注册MergedBeanDefinitionPostProcessor</li>\n</ol><h2 id=\"initmessagesource\">initMessageSource<a href=\"#initmessagesource\" title=\"initMessageSource\"></a></h2><ol><li>若BeanFactory中无name为messageSource的Bean，则注册DelegatingMessageSource</li>\n</ol><h2 id=\"initapplicationeventmulticaster\">initApplicationEventMulticaster<a href=\"#initapplicationeventmulticaster\" title=\"initApplicationEventMulticaster\"></a></h2><ol><li>若BeanFactory中无name为applicationEventMulticaster，则注册SimpleApplicationEventMulticaster</li>\n</ol><h2 id=\"onrefresh\">onRefresh<a href=\"#onrefresh\" title=\"onRefresh\"></a></h2><p>子类可重写改方法，此处为空。</p>\n<h2 id=\"registerlisteners\">registerListeners<a href=\"#registerlisteners\" title=\"registerListeners\"></a></h2><ol><li>往applicationEventMulticaster中注册实现了ApplicationEventListener接口的类。</li>\n</ol><h2 id=\"finishbeanfactoryinitialization\">finishBeanFactoryInitialization<a href=\"#finishbeanfactoryinitialization\" title=\"finishBeanFactoryInitialization\"></a></h2><p>实例化单例对象。</p>\n<img src=\"/post/Java/Spring/10-Spring%E4%B9%8BIoC%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8EBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/Bean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F.png\" class=\"\">\n\n<h2 id=\"finishrefresh\">finishRefresh<a href=\"#finishrefresh\" title=\"finishRefresh\"></a></h2><ol><li>若BeanFactory没有name为lifecycleProcessor的Bean，则注册一个DefaultLifecycleProcessor</li>\n<li>调用lifecycleProcessor的onFresh方法</li>\n<li>发布ContextRefreshedEvent事件</li>\n</ol><h1 id=\"bean生命周期\">Bean生命周期<a href=\"#bean生命周期\" title=\"Bean生命周期\"></a></h1><img src=\"/post/Java/Spring/10-Spring%E4%B9%8BIoC%E5%AE%B9%E5%99%A8%E5%88%9D%E5%A7%8B%E5%8C%96%E4%B8%8EBean%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/1.png\" class=\"\">","prev":{"title":"11-Spring之循环引用","link":"post/Java/Spring/11-Spring之循环引用"},"next":{"title":"Redis之分布式锁","link":"post/中间件/Redis/Redis之分布式锁"},"plink":"https://beginc.github.io/post/Java/Spring/10-Spring之IoC容器初始化与Bean生命周期/","toc":[{"id":"ioc容器初始化","title":"IoC容器初始化","index":"1","children":[{"id":"preparerefresh","title":"prepareRefresh","index":"1.1"},{"id":"obtainfreshbeanfactory","title":"obtainFreshBeanFactory","index":"1.2"},{"id":"preparebeanfactory","title":"prepareBeanFactory","index":"1.3"},{"id":"postprocessbeanfactory","title":"postProcessBeanFactory","index":"1.4"},{"id":"invokebeanfactorypostprocessors","title":"invokeBeanFactoryPostProcessors","index":"1.5"},{"id":"registerbeanpostprocessors","title":"registerBeanPostProcessors","index":"1.6"},{"id":"initmessagesource","title":"initMessageSource","index":"1.7"},{"id":"initapplicationeventmulticaster","title":"initApplicationEventMulticaster","index":"1.8"},{"id":"onrefresh","title":"onRefresh","index":"1.9"},{"id":"registerlisteners","title":"registerListeners","index":"1.10"},{"id":"finishbeanfactoryinitialization","title":"finishBeanFactoryInitialization","index":"1.11"},{"id":"finishrefresh","title":"finishRefresh","index":"1.12"}]},{"id":"bean生命周期","title":"Bean生命周期","index":"2"}]}