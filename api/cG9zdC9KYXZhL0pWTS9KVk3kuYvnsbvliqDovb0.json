{"title":"JVM之类加载","date":"2020-03-03T07:54:09.000Z","date_formatted":{"ll":"Mar 3, 2020","L":"03/03/2020","MM-DD":"03-03"},"thumbnail":"post/Java/JVM/JVM之类加载/cover.jpg","link":"post/Java/JVM/JVM之类加载","categories":["JVM","Java"],"updated":"2020-03-03T09:55:28.639Z","content":"<h1 id=\"类加载阶段\">类加载阶段<a href=\"#类加载阶段\" title=\"类加载阶段\"></a></h1><h2 id=\"加载\">加载<a href=\"#加载\" title=\"加载\"></a></h2><p>将类的字节码载入方法区，为instanceKlass结构。</p>\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD/image-20200303161853808.png\" class=\"\">\n\n<h2 id=\"链接\">链接<a href=\"#链接\" title=\"链接\"></a></h2><h3 id=\"验证\">验证<a href=\"#验证\" title=\"验证\"></a></h3><p>验证字节码是否符合JVM规范。</p>\n<h3 id=\"准备\">准备<a href=\"#准备\" title=\"准备\"></a></h3><ul><li>为static变量分配空间，设置默认值。<ul><li>注意是设置默认值，不是赋值</li>\n<li>JDK1.8中静态变量存储在类对象中（堆）</li>\n</ul></li>\n<li>若static变量为final的基本类型或String，则赋值在准备阶段完成</li>\n<li>若static变量为final的引用类型，则赋值会在初始化阶段完成，而不是准备阶段</li>\n</ul><h3 id=\"解析\">解析<a href=\"#解析\" title=\"解析\"></a></h3><p>将常亮池中的符号引用全部转换成直接引用。</p>\n<ul><li>类和接口的全限定名</li>\n<li>字段的名称和描述符</li>\n<li>方法的名称和描述符</li>\n</ul><p>未解析的常量池，还不知道类，字段，方法等的具体内存位置。</p>\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD/image-20200303165701257.png\" class=\"\">\n\n<p>解析后的常亮池，符号引用变成了内存地址。</p>\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD/image-20200303165744472.png\" class=\"\">\n\n<h2 id=\"初始化\">初始化<a href=\"#初始化\" title=\"初始化\"></a></h2><ul><li>即执行类的<cinit>()V方法</li>\n<li>JVM保证该方法执行的线程安全性</li>\n</ul><h3 id=\"初始化发生的时机\">初始化发生的时机<a href=\"#初始化发生的时机\" title=\"初始化发生的时机\"></a></h3><p>类初始化是懒惰的。</p>\n<p><strong>触发初始化</strong></p>\n<ul><li>main方法所在的类，总会被首先初始化</li>\n<li>首次访问类的静态变量或静态方法</li>\n<li>子类初始化，会触发父类的初始化</li>\n<li>子类访问父类的静态常亮，只会触发父类的初始化</li>\n<li>new对象</li>\n</ul><p><strong>不触发初始化</strong></p>\n<ul><li>访问类的static final修饰的基本类型或String常量，不会触发初始化</li>\n<li>访问类的Class对象，不会触发初始化</li>\n<li>创建类的数组，不会触发初始化</li>\n<li>类加载器的loadClass方法，不会触发初始化</li>\n<li>Class.forName的第二个参数为false时，不会触发初始化</li>\n</ul><h1 id=\"类加载器\">类加载器<a href=\"#类加载器\" title=\"类加载器\"></a></h1><h2 id=\"类加载器类别\">类加载器类别<a href=\"#类加载器类别\" title=\"类加载器类别\"></a></h2><img src=\"/post/Java/JVM/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD/image-20200303170420974.png\" class=\"\">\n\n<h2 id=\"双亲委派模式\">双亲委派模式<a href=\"#双亲委派模式\" title=\"双亲委派模式\"></a></h2><p>如果一个类加载器收到了加载某个类的请求,则该类加载器并不会去加载该类,而是把这个请求委派给父类加载器,每一个层次的类加载器都是如此,因此所有的类加载请求最终都会传送到顶端的启动类加载器;只有当父类加载器在其搜索范围内无法找到所需的类,并将该结果反馈给子类加载器,子类加载器会尝试去自己加载。</p>\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD/1256203-20180714171531925-1737231049.png\" class=\"\">\n\n<h3 id=\"打破双亲委派\">打破双亲委派<a href=\"#打破双亲委派\" title=\"打破双亲委派\"></a></h3><p>DriverManager是由BootstrapClassLoader但它却使用了ServiceLoader.load方法来加载Driver实现类，而ServiceLoader.load中使用的是线程上下文类加载器，为Applicationn ClassLoader，打破了双亲委派。</p>\n<img src=\"/post/Java/JVM/JVM%E4%B9%8B%E7%B1%BB%E5%8A%A0%E8%BD%BD/image-20200303175304022.png\" class=\"\">\n\n<h2 id=\"线程上下文类加载器\">线程上下文类加载器<a href=\"#线程上下文类加载器\" title=\"线程上下文类加载器\"></a></h2><ul><li>ClassLoader.getSystemClassLoader()<ul><li>为Application ClassLoader</li>\n</ul></li>\n<li>Thread.currentThread().getContextClassLoader()<ul><li>线程上下文类加载器</li>\n<li>为Application ClassLoader</li>\n</ul></li>\n</ul><h2 id=\"自定义类加载器\">自定义类加载器<a href=\"#自定义类加载器\" title=\"自定义类加载器\"></a></h2><h4 id=\"何时需要自定义类加载器\">何时需要自定义类加载器<a href=\"#何时需要自定义类加载器\" title=\"何时需要自定义类加载器\"></a></h4><ul><li>加载任意路径下的类文件</li>\n<li>实现同名类的隔离<ul><li>仅当包名类型和类加载器都相同时，两个类才相同</li>\n</ul></li>\n</ul><h3 id=\"步骤\">步骤<a href=\"#步骤\" title=\"步骤\"></a></h3><ol><li>继承ClassLoader</li>\n<li>重写findClass方法<ul><li>读取类文件成为byte[]</li>\n<li>使用defineClass来加载类</li>\n</ul></li>\n<li>使用者调用loadClass来加载类</li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyClassLoader</span> <span class=\"keyword\">extends</span> <span class=\"title\">ClassLoader</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> String PATH = <span class=\"string\">\"C:\\\\Users\\\\Administrator\\\\Desktop\"</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"keyword\">protected</span> Class&lt;?&gt; findClass(String name) <span class=\"keyword\">throws</span> ClassNotFoundException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        File file = <span class=\"keyword\">new</span> File(PATH, name + <span class=\"string\">\".class\"</span>);</span><br><span class=\"line\">        <span class=\"keyword\">try</span>(FileInputStream in = <span class=\"keyword\">new</span> FileInputStream(file); ByteArrayOutputStream out = <span class=\"keyword\">new</span> ByteArrayOutputStream();)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> avaliable;</span><br><span class=\"line\">            <span class=\"keyword\">byte</span>[] buffer = <span class=\"keyword\">new</span> <span class=\"keyword\">byte</span>[<span class=\"number\">1024</span>];</span><br><span class=\"line\">            <span class=\"keyword\">while</span>((avaliable = in.read(buffer)) != -<span class=\"number\">1</span>)&#123;</span><br><span class=\"line\">                out.write(buffer, <span class=\"number\">0</span>, avaliable);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">           <span class=\"keyword\">return</span> defineClass(name, out.toByteArray(), <span class=\"number\">0</span>, out.size());</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (FileNotFoundException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; <span class=\"keyword\">catch</span> (IOException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Main</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> <span class=\"keyword\">throws</span> ClassNotFoundException, IllegalAccessException, InstantiationException, NoSuchMethodException, InvocationTargetException </span>&#123;</span><br><span class=\"line\">        MyClassLoader loader = <span class=\"keyword\">new</span> MyClassLoader();</span><br><span class=\"line\">        Class cls = loader.loadClass(<span class=\"string\">\"Person\"</span>);</span><br><span class=\"line\">        System.out.println(cls);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","next":{"title":"JVM之类文件结构","link":"post/Java/JVM/JVM之类文件结构"},"plink":"https://beginc.github.io/post/Java/JVM/JVM之类加载/","toc":[{"id":"类加载阶段","title":"类加载阶段","index":"1","children":[{"id":"加载","title":"加载","index":"1.1"},{"id":"链接","title":"链接","index":"1.2","children":[{"id":"验证","title":"验证","index":"1.2.1"},{"id":"准备","title":"准备","index":"1.2.2"},{"id":"解析","title":"解析","index":"1.2.3"}]},{"id":"初始化","title":"初始化","index":"1.3","children":[{"id":"初始化发生的时机","title":"初始化发生的时机","index":"1.3.1"}]}]},{"id":"类加载器","title":"类加载器","index":"2","children":[{"id":"类加载器类别","title":"类加载器类别","index":"2.1"},{"id":"双亲委派模式","title":"双亲委派模式","index":"2.2","children":[{"id":"打破双亲委派","title":"打破双亲委派","index":"2.2.1"}]},{"id":"线程上下文类加载器","title":"线程上下文类加载器","index":"2.3"},{"id":"自定义类加载器","title":"自定义类加载器","index":"2.4","children":[{"id":"步骤","title":"步骤","index":"2.4.1"}]}]}]}