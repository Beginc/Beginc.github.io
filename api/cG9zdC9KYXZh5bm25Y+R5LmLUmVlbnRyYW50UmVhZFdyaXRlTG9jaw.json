{"title":"Java并发之ReentrantReadWriteLock","date":"2020-03-07T08:12:05.000Z","date_formatted":{"ll":"Mar 7, 2020","L":"03/07/2020","MM-DD":"03-07"},"link":"post/Java并发之ReentrantReadWriteLock","updated":"2020-03-10T13:19:59.565Z","content":"<h1 id=\"reentrantreadwritelock特性\">ReentrantReadWriteLock特性<a href=\"#reentrantreadwritelock特性\" title=\"ReentrantReadWriteLock特性\"></a></h1><ul><li><p>支持ReentrantLock的所有特性</p>\n</li>\n<li><p>支持读锁和写锁</p>\n<ul><li><p>读读不互斥</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock lock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock.ReadLock readLock = lock.readLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                readLock.lock();</span><br><span class=\"line\">                System.out.println(<span class=\"string\">\"获取读锁成功\"</span>);</span><br><span class=\"line\">                readLock.unlock();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        readLock.lock();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        thread.join();</span><br><span class=\"line\">        readLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>读写互斥</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock lock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock.ReadLock readLock = lock.readLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(readLock.tryLock())&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"获取读锁成功\"</span>);</span><br><span class=\"line\">                    readLock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"获取读锁失败\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        writeLock.lock();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        thread.join();</span><br><span class=\"line\">        writeLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>写写互斥</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestThread</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock lock = <span class=\"keyword\">new</span> ReentrantReadWriteLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock.ReadLock readLock = lock.readLock();</span><br><span class=\"line\">    <span class=\"keyword\">private</span> ReentrantReadWriteLock.WriteLock writeLock = lock.writeLock();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Test</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">test1</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> ExecutionException, InterruptedException </span>&#123;</span><br><span class=\"line\">        Thread thread = <span class=\"keyword\">new</span> Thread(<span class=\"keyword\">new</span> Runnable() &#123;</span><br><span class=\"line\">            <span class=\"meta\">@Override</span></span><br><span class=\"line\">            <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">run</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(writeLock.tryLock())&#123;</span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"获取写锁成功\"</span>);</span><br><span class=\"line\">                    writeLock.unlock();</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    System.out.println(<span class=\"string\">\"获取写锁失败\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">        writeLock.lock();</span><br><span class=\"line\">        thread.start();</span><br><span class=\"line\">        thread.join();</span><br><span class=\"line\">        writeLock.unlock();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n</li>\n</ul></li>\n</ul><h1 id=\"reentrantreadwritelock原理\">ReentrantReadWriteLock原理<a href=\"#reentrantreadwritelock原理\" title=\"ReentrantReadWriteLock原理\"></a></h1><h2 id=\"同步器\">同步器<a href=\"#同步器\" title=\"同步器\"></a></h2><p>ReadLock和WriteLock使用的是同一个同步器，也就是该同步器既支持排他模式，又支持共享模式。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ReentrantReadWriteLock</span><span class=\"params\">(<span class=\"keyword\">boolean</span> fair)</span> </span>&#123;</span><br><span class=\"line\">    sync = fair ? <span class=\"keyword\">new</span> FairSync() : <span class=\"keyword\">new</span> NonfairSync();</span><br><span class=\"line\">    readerLock = <span class=\"keyword\">new</span> ReadLock(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">    writerLock = <span class=\"keyword\">new</span> WriteLock(<span class=\"keyword\">this</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">ReadLock</span><span class=\"params\">(ReentrantReadWriteLock lock)</span> </span>&#123;</span><br><span class=\"line\">    sync = lock.sync;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"title\">WriteLock</span><span class=\"params\">(ReentrantReadWriteLock lock)</span> </span>&#123;</span><br><span class=\"line\">    sync = lock.sync;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><img src=\"Java并发之ReentrantReadWriteLock.assets/image-20200307162350462.png\" class=\"cy\" alt=\"image-20200307162350462\"></p>\n<h2 id=\"状态state\">状态State<a href=\"#状态state\" title=\"状态State\"></a></h2><p>ReentrantReadWriteLock的同步器中，读锁和写锁共用一个state</p>\n<ul><li>读锁占用高16位</li>\n<li>写锁占用低16位</li>\n</ul><h2 id=\"writelock\">WriteLock<a href=\"#writelock\" title=\"WriteLock\"></a></h2><h3 id=\"获取锁\">获取锁<a href=\"#获取锁\" title=\"获取锁\"></a></h3><p><strong>调用流程</strong></p>\n<ol><li>WriteLock.lock()<ul><li>调用acquire获取排他锁</li>\n</ul></li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sync.acquire(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol><li>AQS在acquire中调用tryAcquire</li>\n<li>Sync调用tryAcquire<ul><li>有人获得了读锁：失败</li>\n<li>有人获得了写锁：失败</li>\n<li>都无：获取写锁</li>\n</ul></li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ReservedStackAccess</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryAcquire</span><span class=\"params\">(<span class=\"keyword\">int</span> acquires)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">/*</span></span><br><span class=\"line\"><span class=\"comment\">             * Walkthrough:</span></span><br><span class=\"line\"><span class=\"comment\">             * 1. If read count nonzero or write count nonzero</span></span><br><span class=\"line\"><span class=\"comment\">             *    and owner is a different thread, fail.</span></span><br><span class=\"line\"><span class=\"comment\">             * 2. If count would saturate, fail. (This can only</span></span><br><span class=\"line\"><span class=\"comment\">             *    happen if count is already nonzero.)</span></span><br><span class=\"line\"><span class=\"comment\">             * 3. Otherwise, this thread is eligible for lock if</span></span><br><span class=\"line\"><span class=\"comment\">             *    it is either a reentrant acquire or</span></span><br><span class=\"line\"><span class=\"comment\">             *    queue policy allows it. If so, update state</span></span><br><span class=\"line\"><span class=\"comment\">             *    and set owner.</span></span><br><span class=\"line\"><span class=\"comment\">             */</span></span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程</span></span><br><span class=\"line\">    Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">// 获取state</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"comment\">// 获取写锁state</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> w = exclusiveCount(c);</span><br><span class=\"line\">    <span class=\"comment\">// 有人获得了锁（读锁，写锁）</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (c != <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// (Note: if c != 0 and w == 0 then shared count != 0)</span></span><br><span class=\"line\">        <span class=\"comment\">// 1. c != 0且w == 0说明有线程获取了读锁，此时获取写锁失败，即读写互斥</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (w == <span class=\"number\">0</span> || current != getExclusiveOwnerThread())</span><br><span class=\"line\">        <span class=\"comment\">// 2. 当前获得写锁的线程不是自己，此时获取写锁失败，写写互斥</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 判断是否超过最大重入次数</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (w + exclusiveCount(acquires) &gt; MAX_COUNT)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> Error(<span class=\"string\">\"Maximum lock count exceeded\"</span>);</span><br><span class=\"line\">\t\t<span class=\"comment\">// 获取写锁，重入或非重入</span></span><br><span class=\"line\">        setState(c + acquires);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"comment\">// 无人获得锁</span></span><br><span class=\"line\">    <span class=\"comment\">// 判断写者是否应该阻塞---&gt;用于实现公平与非公平锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (writerShouldBlock() ||</span><br><span class=\"line\">        <span class=\"comment\">// 获取写锁</span></span><br><span class=\"line\">        !compareAndSetState(c, c + acquires))</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">false</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 设置写锁的拥有者为当前线程</span></span><br><span class=\"line\">    setExclusiveOwnerThread(current);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"释放锁\">释放锁<a href=\"#释放锁\" title=\"释放锁\"></a></h3><p><strong>调用流程</strong></p>\n<ol><li>WriteLock.unlock()</li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sync.release(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol><li>AQS在release中调用tryRelease</li>\n<li>Sync调用tryRelease</li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ReservedStackAccess</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryRelease</span><span class=\"params\">(<span class=\"keyword\">int</span> releases)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!isHeldExclusively())</span><br><span class=\"line\">        <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalMonitorStateException();</span><br><span class=\"line\">    <span class=\"comment\">// 锁重入次数</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> nextc = getState() - releases;</span><br><span class=\"line\">    <span class=\"keyword\">boolean</span> free = exclusiveCount(nextc) == <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 锁重入次数为0时，释放写锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (free)</span><br><span class=\"line\">        setExclusiveOwnerThread(<span class=\"keyword\">null</span>);</span><br><span class=\"line\">    setState(nextc);</span><br><span class=\"line\">    <span class=\"keyword\">return</span> free;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"readlock\">ReadLock<a href=\"#readlock\" title=\"ReadLock\"></a></h2><h3 id=\"获取锁-1\">获取锁<a href=\"#获取锁-1\" title=\"获取锁\"></a></h3><p><strong>调用流程</strong></p>\n<ol><li>ReadLock.lock()<ul><li>调用了acquireShared获取共享锁</li>\n</ul></li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">lock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sync.acquireShared(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol><li><p>AQS在acquireShared中调用tryAcquireShared</p>\n</li>\n<li><p>Sync调用tryAcquireShared</p>\n</li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ReservedStackAccess</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> <span class=\"title\">tryAcquireShared</span><span class=\"params\">(<span class=\"keyword\">int</span> unused)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程</span></span><br><span class=\"line\">    Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">// 获取state</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">    <span class=\"comment\">// 获取排他锁的state</span></span><br><span class=\"line\">    <span class=\"comment\">// 若有线程拿着排他锁且这个线程不是当前线程，则获取失败</span></span><br><span class=\"line\">    <span class=\"comment\">// 即读写互斥</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (exclusiveCount(c) != <span class=\"number\">0</span> &amp;&amp;</span><br><span class=\"line\">        getExclusiveOwnerThread() != current)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"comment\">// 获取共享锁的state</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> r = sharedCount(c);</span><br><span class=\"line\">    <span class=\"comment\">// 判断读者是否应该阻塞---&gt;用于实现公平与非公平锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (!readerShouldBlock() &amp;&amp;</span><br><span class=\"line\">        r &lt; MAX_COUNT &amp;&amp;</span><br><span class=\"line\">        <span class=\"comment\">// 把共享锁的state加1</span></span><br><span class=\"line\">        compareAndSetState(c, c + SHARED_UNIT)) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前线程为第一个读者</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (r == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 记录下当前线程为第一个读者</span></span><br><span class=\"line\">            firstReader = current;</span><br><span class=\"line\">            <span class=\"comment\">// 记录下第一个读者重入的次数</span></span><br><span class=\"line\">            firstReaderHoldCount = <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前线程是之前记录下的第一个读者</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (firstReader == current) &#123;</span><br><span class=\"line\">            <span class=\"comment\">// 第一个读者重入的次数加1</span></span><br><span class=\"line\">            firstReaderHoldCount++;</span><br><span class=\"line\">        <span class=\"comment\">// 如果当前线程不是第一个读者，也不是以前记录的第一个读者</span></span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            HoldCounter rh = cachedHoldCounter;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (rh == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">                rh.tid != LockSupport.getThreadId(current))</span><br><span class=\"line\">                cachedHoldCounter = rh = readHolds.get();</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (rh.count == <span class=\"number\">0</span>)</span><br><span class=\"line\">                readHolds.set(rh);</span><br><span class=\"line\">            rh.count++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> fullTryAcquireShared(current);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"释放锁-1\">释放锁<a href=\"#释放锁-1\" title=\"释放锁\"></a></h3><p><strong>调用流程</strong></p>\n<ol><li>ReadLock.unlock()</li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">unlock</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    sync.releaseShared(<span class=\"number\">1</span>);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol><li><p>AQS中调用tryReleaseShared()</p>\n</li>\n<li><p>Sync调用tryReleaseShared()</p>\n</li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@ReservedStackAccess</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">final</span> <span class=\"keyword\">boolean</span> <span class=\"title\">tryReleaseShared</span><span class=\"params\">(<span class=\"keyword\">int</span> unused)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// 获取当前线程</span></span><br><span class=\"line\">    Thread current = Thread.currentThread();</span><br><span class=\"line\">    <span class=\"comment\">// 如果是第一个读者要求释放读锁</span></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (firstReader == current) &#123;</span><br><span class=\"line\">        <span class=\"comment\">// assert firstReaderHoldCount &gt; 0;</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (firstReaderHoldCount == <span class=\"number\">1</span>)</span><br><span class=\"line\">            firstReader = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            firstReaderHoldCount--;</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">        HoldCounter rh = cachedHoldCounter;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (rh == <span class=\"keyword\">null</span> ||</span><br><span class=\"line\">            rh.tid != LockSupport.getThreadId(current))</span><br><span class=\"line\">            rh = readHolds.get();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = rh.count;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count &lt;= <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">            readHolds.remove();</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (count &lt;= <span class=\"number\">0</span>)</span><br><span class=\"line\">                <span class=\"keyword\">throw</span> unmatchedUnlockException();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        --rh.count;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (;;) &#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> c = getState();</span><br><span class=\"line\">        <span class=\"keyword\">int</span> nextc = c - SHARED_UNIT;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (compareAndSetState(c, nextc))</span><br><span class=\"line\">            <span class=\"comment\">// Releasing the read lock has no effect on readers,</span></span><br><span class=\"line\">            <span class=\"comment\">// but it may allow waiting writers to proceed if</span></span><br><span class=\"line\">            <span class=\"comment\">// both read and write locks are now free.</span></span><br><span class=\"line\">            <span class=\"keyword\">return</span> nextc == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n","prev":{"title":"Java并发之AQS","link":"post/Java并发之AQS"},"next":{"title":"Java集合之CopyOnWriteArrayList","link":"post/Java集合之CopyOnWriteArrayList"},"plink":"https://beginc.github.io/post/Java并发之ReentrantReadWriteLock/","toc":[{"id":"reentrantreadwritelock特性","title":"ReentrantReadWriteLock特性","index":"1"},{"id":"reentrantreadwritelock原理","title":"ReentrantReadWriteLock原理","index":"2","children":[{"id":"同步器","title":"同步器","index":"2.1"},{"id":"状态state","title":"状态State","index":"2.2"},{"id":"writelock","title":"WriteLock","index":"2.3","children":[{"id":"获取锁","title":"获取锁","index":"2.3.1"},{"id":"释放锁","title":"释放锁","index":"2.3.2"}]},{"id":"readlock","title":"ReadLock","index":"2.4","children":[{"id":"获取锁-1","title":"获取锁","index":"2.4.1"},{"id":"释放锁-1","title":"释放锁","index":"2.4.2"}]}]}]}