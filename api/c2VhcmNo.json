[{"title":"配置文件整合","date":"2019-08-28T14:27:01.000Z","updated":"2019-08-28T16:47:56.919Z","content":"SpringapplicationContext.xml\n12345678910111213141516171819&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"        xmlns:context=\"http://www.springframework.org/schema/context\"        xmlns:aop=\"http://www.springframework.org/schema/aop\"        xmlns:tx=\"http://www.springframework.org/schema/tx\"        xmlns:mvc=\"http://www.springframework.org/schema/mvc\"        xsi:schemaLocation=\"http://www.springframework.org/schema/beans        http://www.springframework.org/schema/beans/spring-beans.xsd        http://www.springframework.org/schema/context        http://www.springframework.org/schema/context/spring-context.xsd        http://www.springframework.org/schema/aop        http://www.springframework.org/schema/aop/spring-aop.xsd        http://www.springframework.org/schema/tx        http://www.springframework.org/schema/tx/spring-tx.xsd        http://www.springframework.org/schema/mvc        http://www.springframework.org/schema/mvc/spring-mvc.xsd\"&gt;&lt;/beans&gt;\n\nSpringMVCspring-mvc.xml\n123456789101112&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txmlns:context=\"http://www.springframework.org/schema/context\"\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\txsi:schemaLocation=\"http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/mvc                           http://www.springframework.org/schema/mvc/spring-mvc.xsd                           http://www.springframework.org/schema/context                           http://www.springframework.org/schema/context/spring-context.xsd \"&gt;\t &lt;/beans&gt;\n\nMyBatisSqlMapConfig.xml\n1234567&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt;&lt;/configuration&gt;\n\nmapper.xml\n1234567&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"\"&gt;&lt;/mapper&gt;\n\nJDBCjdbc.properties\n1234jdbc.driver=com.mysql.cj.jdbc.Driverjdbc.url=jdbc:mysql://localhost:3306/easypay?serverTimezone=UTCjdbc.username=rootjdbc.password=Hgld521125\n\nLogbacklogback.xml\n12345678910&lt;configuration&gt;    &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;        &lt;encoder&gt;            &lt;pattern&gt;[%d&#123;HH:mm:ss.SSS&#125;][%thread][%-5level][%logger&#123;36&#125;]: %msg%n&lt;/pattern&gt;        &lt;/encoder&gt;    &lt;/appender&gt;    &lt;root level=\"WARN\"&gt;        &lt;appender-ref ref=\"STDOUT\"/&gt;    &lt;/root&gt;&lt;/configuration&gt;\n\n","thumbnail":"/post/配置文件整合/cover.jpg","plink":"https://beginc.github.io/post/配置文件整合/"},{"title":"Java日志框架","date":"2019-08-28T14:26:52.000Z","updated":"2019-08-28T16:41:46.579Z","content":"Java日志框架分类日志实现框架实现具体的记录日志的操作的框架\n\nlog4j\nlogback\n其他\n\n日志门面框架主要用于适配各种不同的低层日志实现框架，提供统一访问的API，充当门面\n\nslf4j\ncommons-logging\n\nSLF4J包介绍\nslf4j-api-1.7.27.jar核心包，只要使用slf4j则必须引入\nslf4j-log4j12-1.7.27.jar绑定log4j1.2版本的包\nslf4j-jdk14-1.7.27.jar绑定使用java.util.logging的包\nslf4j-nop-1.7.27.jar不进行任何日志操作\nslf4j-simple-1.7.27.jar使用简单的日志框架实现的包\nslf4j-jcl-1.7.27.jar绑定使用Jakarta Commons Logging的包\nlogback-classic-1.2.3.jar绑定使用logback的包\n\n绑定具体日志框架\n引入slf4j-api-1.7.27.jar\n引入日志框架的包\n引入对应的绑定日志框架的包\n\n使用\n\nLoggerFactory.getLogger(logger名字)\nlogger.trace()\nlogger.debug()\nlogger.info()\nlogger.warn()\nlogger.error()\n\n12345678910111213141516import org.junit.Test;import org.slf4j.Logger;import org.slf4j.LoggerFactory;public class TestLog &#123;    @Test    public void test01() &#123;        Logger logger = LoggerFactory.getLogger(\"test\");        logger.trace(\"From slf4j, from class &#123;&#125;\", getClass().getName());        logger.debug(\"From slf4j, from class &#123;&#125;\", getClass().getName());        logger.info(\"From slf4j, from class &#123;&#125;\", getClass().getName());        logger.warn(\"From slf4j, from class &#123;&#125;\", getClass().getName());        logger.error(\"From slf4j, from class &#123;&#125;\", getClass().getName());    &#125;&#125;\n\nLogback包介绍\nlogback-core.jar基础核心包\nlogback-classic.jar对slf4j API的直接实现\nlogback-access.jar实现在HTTP环境中进行日志\n\nLogger Context负责生产logger，并将所有logger组织成一个树的层次\n\ncom.foo是com.foo.Bar的parent logger(用 . 来表示继承关系)\n\n日志级别基本日志级别\nTRACE\nDEBUG\nINFO\nWARN\nERROR\nOFF关闭日志\n\n日志级别继承若一个logger没有设置日志级别，则它会从离它最近的继承层次上的parent logger继承日志级别\n\n\n\nAppender负责将日志输出到具体的目的地\nAppender的加性性质若一个logger的additivity flag被设置为true，则它的祖先logger的Appender都会作用在它上\n\n\n常用AppenderConsoleAppender输出到控制台\n\ntarget目的地，为System.out或System.err\n\nFileAppender输出到文件\n\nfile文件名\n\nRollingFileAppender(TODO)继承与FileAppender，日志达到一定数量时会将输出文件换到另一个\n\nfile文件名\nrollingPolicy\ntriggeringPolicy指定何时触发滚动\n\n配置找配置文件的步骤\n找clasapath:logback-test.xml\n找clasapath:logback.groovy\n找clasapath:logback.xml\n找META-INF\\services\\ch.qos.logback.classic.spi中指定的类(ServiceProvider)\n使用BasicConfigurator进行基本配置，默认输出到控制台\n\n基本配置1234567891011121314&lt;configuration&gt;  &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;    &lt;encoder&gt;      &lt;pattern&gt;[%d&#123;HH:mm:ss.SSS&#125;][%thread]][%-5level][%logger&#123;36&#125;]: %msg%n&lt;/pattern&gt;    &lt;/encoder&gt;  &lt;/appender&gt;  &lt;logger name=\"mylogger\" level=\"INFO\" /&gt;  &lt;root level=\"DEBUG\"&gt;    &lt;appender-ref ref=\"STDOUT\" /&gt;  &lt;/root&gt;&lt;/configuration&gt;\n\n详细配置Status Data\n\ndebug=&quot;true&quot;，会自动打印出状态信息(如找配置文件的步骤)\n\n1234567891011121314&lt;configuration debug=\"true\"&gt;  &lt;appender name=\"STDOUT\" class=\"ch.qos.logback.core.ConsoleAppender\"&gt;    &lt;encoder&gt;      &lt;pattern&gt;[%d&#123;HH:mm:ss.SSS&#125;][%thread]][%-5level][%logger&#123;36&#125;]: %msg%n&lt;/pattern&gt;    &lt;/encoder&gt;  &lt;/appender&gt;  &lt;logger name=\"mylogger\" level=\"INFO\" /&gt;  &lt;root level=\"DEBUG\"&gt;    &lt;appender-ref ref=\"STDOUT\" /&gt;  &lt;/root&gt;&lt;/configuration&gt;\n\nlogger\n\nname\nlevel\nadditivity设置Appender加性\n\nappender\n\nname\nclass\nencoder\n任意自身属性\n\n12345678&lt;appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\"&gt;    &lt;file&gt;        log.txt    &lt;/file&gt;    &lt;encoder&gt;        &lt;pattern&gt;[%d&#123;HH:mm:ss.SSS&#125;][%thread]][%-5level][%logger&#123;36&#125;]: %msg%n&lt;/pattern&gt;    &lt;/encoder&gt;&lt;/appender&gt;\n\nproperty用来定义一些变量\n\nname属性名\nvalue属性值\nfile引入properties文件\nscope\nlocal只在初始化配置阶段可用\ncontext在整个LoggerContext存在期间都可用\nsystem插入JVM&#39;s system properties只要JVM存在就能访问\n\n\n\n1234567891011121314&lt;configuration&gt;  &lt;property name=\"USER_HOME\" value=\"/home/sebastien\" /&gt;  &lt;property file=\"src/main/java/chapters/configuration/variables1.properties\" /&gt;  &lt;appender name=\"FILE\" class=\"ch.qos.logback.core.FileAppender\"&gt;    &lt;file&gt;$&#123;USER_HOME&#125;/myApp.log&lt;/file&gt;    &lt;encoder&gt;      &lt;pattern&gt;%msg%n&lt;/pattern&gt;    &lt;/encoder&gt;  &lt;/appender&gt;  &lt;root level=\"debug\"&gt;    &lt;appender-ref ref=\"FILE\" /&gt;  &lt;/root&gt;&lt;/configuration&gt;\n\n获取context variable\n123Logger logger = LoggerFactory.getLogger(\"test\");LoggerContext context = (LoggerContext) LoggerFactory.getILoggerFactory();logger.info(context.getProperty(\"file\"));\n\nSpring替换commons-logging为slf4j\n排除spring-core.jar对commons-logging的依赖\n1234567891011&lt;dependency&gt;    &lt;groupId&gt;org.springframework&lt;/groupId&gt;    &lt;artifactId&gt;spring-core&lt;/artifactId&gt;    &lt;version&gt;$&#123;spring.version&#125;&lt;/version&gt;    &lt;exclusions&gt;        &lt;exclusion&gt;            &lt;groupId&gt;commons-logging&lt;/groupId&gt;            &lt;artifactId&gt;commons-logging&lt;/artifactId&gt;        &lt;/exclusion&gt;    &lt;/exclusions&gt;&lt;/dependency&gt;\n\n引入slf4j\n12345&lt;dependency&gt;    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;    &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;    &lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt;\n\n引入辅助包进行适配\n12345&lt;dependency&gt;    &lt;groupId&gt;org.slf4j&lt;/groupId&gt;    &lt;artifactId&gt;jcl-over-slf4j&lt;/artifactId&gt;    &lt;version&gt;1.7.25&lt;/version&gt;&lt;/dependency&gt;\n\n\n\nMyBatis指定日志框架在SqlMapConfig.xml中settings配置logImpl\n\n可为SLF4J | LOG4J | LOG4J2 | JDK_LOGGING | COMMONS_LOGGING | STDOUT_LOGGING | NO_LOGGING\n\n12345678910111213141516171819202122232425262728&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt;    &lt;properties resource=\"jdbc.properties\"/&gt;    &lt;settings&gt;        &lt;setting name=\"logImpl\" value=\"slf4j\"/&gt;    &lt;/settings&gt;    &lt;typeAliases&gt;        &lt;package name=\"bean\"/&gt;    &lt;/typeAliases&gt;    &lt;environments default=\"dev\"&gt;        &lt;environment id=\"dev\"&gt;            &lt;transactionManager type=\"JDBC\"&gt;&lt;/transactionManager&gt;            &lt;dataSource type=\"POOLED\"&gt;                &lt;property name=\"driver\" value=\"$&#123;jdbc.driver&#125;\"/&gt;                &lt;property name=\"url\" value=\"$&#123;jdbc.url&#125;\"/&gt;                &lt;property name=\"username\" value=\"$&#123;jdbc.username&#125;\"/&gt;                &lt;property name=\"password\" value=\"$&#123;jdbc.password&#125;\"/&gt;            &lt;/dataSource&gt;        &lt;/environment&gt;    &lt;/environments&gt;    &lt;mappers&gt;        &lt;mapper resource=\"sqlmap/ManagerMapper.xml\"/&gt;    &lt;/mappers&gt;&lt;/configuration&gt;\n\n","thumbnail":"/post/Java日志框架/cover.jpg","plink":"https://beginc.github.io/post/Java日志框架/"},{"title":"MyBatis缓存","date":"2019-08-28T13:04:25.000Z","updated":"2019-08-28T16:41:09.957Z","content":"一级缓存一级缓存介绍在应用运行过程中，我们有可能在一次数据库会话中，执行多次查询条件完全相同的SQL，MyBatis提供了一级缓存的方案优化这部分场景，如果是相同的SQL语句，会优先命中一级缓存，避免直接对数据库进行查询，提高性能。在每个SqlSession中持有Executor，每个Executor中有一个LocalCache。当用户发起查询时，MyBatis根据当前执行的语句生成MappedStatement，在Local Cache进行查询，如果缓存命中的话，直接返回结果给用户，如果缓存没有命中的话，查询数据库，结果写入Local Cache，最后返回结果给用户。\n一级缓存配置在SqlMapConfig.xml的settings中进行配置，默认值为SESSION\n\nSESSION缓存作用一次SqlSession\nSTATEMENT只对当前执行的这一个Statement有效\n\n1234567&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;&lt;!DOCTYPE configuration PUBLIC \"-//mybatis.org//DTD Config 3.0//EN\" \"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt;    &lt;settings&gt;        &lt;setting name=\"localCacheScope\" value=\"SESSION\"/&gt;    &lt;/settings&gt;&lt;/configuration&gt;\n\n1234student = mapper.findById(1); //不走缓存student = mapper.findById(1); //缓存student = mapper.findById(1); //缓存student = mapper.findById(1); //缓存\n\n调试分析\n进入invoke方法????\n\n调用cachedMapperMethod，methodCache为ConcurrentHashMap，在其中获取存储的方法对象\n\n没有找到该method对象，说明没有进行过调用，为其新建一个MapperMethod对象，存储到methodCache中\n\n执行方法\n\n\n一级缓存特点\nSESSION Scope缓存只在一个session内有效\n一个session内多次使用同一个查询，除第一次查询外，其他走缓存\n使用修改（增，删，改）操作后一级缓存会被清空失效\n无法适应分布式下多个session的缓解，一级缓存会导致读脏数据\n\n一级缓存导致脏读123456789101112131415161718192021SqlSession session1 = factory.openSession(true);SqlSession session2 = factory.openSession(true);StudentMapper mapper1 = session1.getMapper(StudentMapper.class);StudentMapper mapper2 = session2.getMapper(StudentMapper.class);// Student(name=\"Bob\")student = mapper1.findById(1); //不走缓存，建立缓存// Student(name=\"Bob\")student = mapper1.findById(1); //session1缓存// Student(name=\"Bob\")student = mapper2.findById(1); //不走缓存，建立缓存// Student(name=\"Bob\")student = mapper2.findById(1); //session2缓存student.setName(\"John\"); mapper1.updateName(student); //更新名字，session1清空缓存session1.commit()// Student(name=\"John\")student = mapper1.findById(1); //不走缓存，建立缓存// Student(name=\"Bob\")student = mapper2.findById(1); //继续走缓存，脏读!!\n\n解决方法\n将localSessionScope设置为STATEMENT\n","thumbnail":"/post/MyBatis缓存/cover.jpg","plink":"https://beginc.github.io/post/MyBatis缓存/"},{"title":"Java反射","date":"2019-08-28T12:32:12.000Z","updated":"2019-08-28T16:41:57.531Z","content":"Class与反射 Java除了基本类型外都是class，class是由JVM在执行过程中动态加载的。JVM在第一次读取到一种class类型时，将其加载进内存。每加载一种class，JVM就为其创建一个Class类型的实例，并关联起来。注意：这里的Class类型是一个名叫Class的class。该Class包含了该类型的所有信息。通过Class实例获取类信息的方式叫做反射\n类动态加载JVM在执行Java程序的时候，并不是一次性把所有用到的class全部加载到内存，而是第一次需要用到class时才加载。利用这个特性我们可以在运行时动态加载类。\n获取Class实例\n类型.class\n1Class cls = String.class;\n\n类的实例.getClass()\n12String s = \"123\";Class cls = s.getClass();\n\nClass.forName(&quot;java.lang.String&quot;)\n\n\n获取类的信息\ncls.getName()获取全称\ncls.getSimpleName()获取类名\ncls.getPackage().getName()获取报名\ncls.isInterface()\ncls.isEnum()\ncls.isArray()\ncls.isPrimitive()\n\n获取字段信息获取Field对象\nField getField(name)根据字段名获取某个public的field（包括父类）\nField getDeclaredField(name)根据字段名获取当前类的某个field（不包括父类)\nField[] getFields()获取所有public的field（包括父类）\nField[] getDeclaredFields()获取当前类的所有field（不包括父类）\n\n获取Field对象的信息\ngetName()返回字段名称，例如，”name”；\ngetType()返回字段类型，也是一个Class实例，例如，String.class；\ngetModifiers()返回字段的修饰符，它是一个int，不同的bit表示不同的含义。\n可用Modifier类的一些静态方法来判断\n12345678910&gt; Field f = String.class.getDeclaredField(\"value\");&gt; f.getName(); // \"value\"&gt; f.getType(); // class [B 表示byte[]类型&gt; int m = f.getModifiers();&gt; Modifier.isFinal(m); // true&gt; Modifier.isPublic(m); // false&gt; Modifier.isProtected(m); // false&gt; Modifier.isPrivate(m); // true&gt; Modifier.isStatic(m); // false&gt;\n\n\n\n获取Field的指\n字段.get(类的实例对象)访问实例对象的该字段值\n字段.setAccessible(true)设置实例对象该字段值的可访问性\n\n123456789101112131415161718public class Main &#123;    public static void main(String[] args) throws Exception &#123;        Object p = new Person(\"Xiao Ming\");        Class c = p.getClass();        Field f = c.getDeclaredField(\"name\");        Object value = f.get(p);        System.out.println(value); // \"Xiao Ming\"    &#125;&#125;class Person &#123;    private String name;    public Person(String name) &#123;        this.name = name;    &#125;&#125;\n\n设置字段的值\n字段.set(类的实例对象, 值)访问实例对象的该字段值\n字段.setAccessible(true)设置实例对象该字段值的可访问性\n\n123456789101112131415161718192021222324public class Main &#123;    public static void main(String[] args) throws Exception &#123;        Person p = new Person(\"Xiao Ming\");        System.out.println(p.getName()); // \"Xiao Ming\"        Class c = p.getClass();        Field f = c.getDeclaredField(\"name\");        f.setAccessible(true);        f.set(p, \"Xiao Hong\");        System.out.println(p.getName()); // \"Xiao Hong\"    &#125;&#125;class Person &#123;    private String name;    public Person(String name) &#123;        this.name = name;    &#125;    public String getName() &#123;        return this.name;    &#125;&#125;\n\n获取方法获取Method对象\nMethod getMethod(name, Class...)获取某个public的Method（包括父类）(第二个参数parameterTypes是按声明顺序标识该方法形参类型，可用于重载的情况)\nMethod getDeclaredMethod(name, Class...)获取当前类的某个Method（不包括父类）(第二个参数parameterTypes是按声明顺序标识该方法形参类型，可用于重载的情况)\nMethod[] getMethods()获取所有public的Method（包括父类）\nMethod[] getDeclaredMethods()获取当前类的所有Method（不包括父类）\n\n获取Method信息\ngetName()返回方法名称，例如：”getScore”；\ngetReturnType()返回方法返回值类型，也是一个Class实例，例如：String.class；\ngetParameterTypes()返回方法的参数类型，是一个Class数组，例如：{String.class, int.class}；\ngetModifiers()返回方法的修饰符，它是一个int，不同的bit表示不同的含义。\n\n调用Method\nMethod.invoke(对象实例，...)传入对象实例和参数(静态方法第一个参数为null)\nMethod.setAccessible(true)调用非public方法时需要设置允许调用\n\n","thumbnail":"/post/Java反射/cover.jpg","plink":"https://beginc.github.io/post/Java反射/"},{"title":"SpringMVC入门","date":"2019-08-24T13:42:43.000Z","updated":"2019-08-28T16:39:51.447Z","content":"创建Maven项目\n创建时使用maven-archetype-webapp\n\n编译设置1234567891011121314151617&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd\"&gt;\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\t&lt;groupId&gt;cn.edu.njust&lt;/groupId&gt;\t&lt;artifactId&gt;springmvc01&lt;/artifactId&gt;\t&lt;packaging&gt;war&lt;/packaging&gt;\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\t&lt;name&gt;springmvc01 Maven Webapp&lt;/name&gt;\t&lt;url&gt;http://maven.apache.org&lt;/url&gt;\t&lt;properties&gt;\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\t\t&lt;maven.compiler.source&gt;12&lt;/maven.compiler.source&gt;\t\t&lt;maven.compiler.target&gt;12&lt;/maven.compiler.target&gt;\t&lt;/properties&gt;&lt;/project&gt;\n\n引入依赖\nSpring Web MVC\n此处需要注意spring-webmvc包和spring-web的区别\n\n使用spring开发web应用一定依赖spring-web但不一定使用SpringMVC\n使用SpringMVC开发依赖spring-webmvc, 且spring-webmvc是依赖spring-web的\n\n\n\nJavaWeb包(由于tomcat中有这些包, 所以scope需要设置为provided)\nServlet\nJSP\nJSTL\n\n\nJunit + spring-test\n\n123456789101112131415161718192021222324252627282930313233343536&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;3.8.1&lt;/version&gt;        &lt;scope&gt;test&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;        &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;        &lt;version&gt;4.0.1&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet.jsp&lt;/groupId&gt;        &lt;artifactId&gt;javax.servlet.jsp-api&lt;/artifactId&gt;        &lt;version&gt;2.3.3&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.servlet&lt;/groupId&gt;        &lt;artifactId&gt;jstl&lt;/artifactId&gt;        &lt;version&gt;1.2&lt;/version&gt;        &lt;scope&gt;provided&lt;/scope&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;\n\n配置maven-tomcat7-plugin插件\n不进行配置之后使用tomcat:run会出错, 这里需要使用tomcat7:run\n配置contextReloadable可实现热部署\n\n12345678910111213&lt;build&gt;    &lt;finalName&gt;springmvc01&lt;/finalName&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.apache.tomcat.maven&lt;/groupId&gt;            &lt;artifactId&gt;tomcat7-maven-plugin&lt;/artifactId&gt;            &lt;version&gt;2.1&lt;/version&gt;            &lt;configuration&gt;                    &lt;contextReloadable&gt;true&lt;/contextReloadable&gt;            &lt;/configuration&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;\n\n配置核心组件配置核心配置文件springmvc.xml\n开启包扫描\n&lt;mvc:default-servlet-handler/&gt;设置静态资源将不会被前段控制器拦截, 交给Web服务器进行处理\n\n123456789101112131415&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txmlns:context=\"http://www.springframework.org/schema/context\"\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\txsi:schemaLocation=\"http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/mvc                           http://www.springframework.org/schema/mvc/spring-mvc.xsd                           http://www.springframework.org/schema/context                           http://www.springframework.org/schema/context/spring-context.xsd \"&gt;\t&lt;context:component-scan base-package=\"controller\"/&gt;\t&lt;mvc:annotation-driven/&gt;\t&lt;mvc:default-servlet-handler/&gt;&lt;/beans&gt;\n\nHandlerMapping和HandlerAdapter方式一: 分别配置12345678910111213141516&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txmlns:context=\"http://www.springframework.org/schema/context\"\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\txsi:schemaLocation=\"http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/mvc                           http://www.springframework.org/schema/mvc/spring-mvc.xsd                           http://www.springframework.org/schema/context                           http://www.springframework.org/schema/context/spring-context.xsd \"&gt;\t&lt;context:component-scan base-package=\"controller\"/&gt;    &lt;mvc:default-servlet-handler/&gt;\t&lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter\"/&gt;\t&lt;bean class=\"org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping\"/&gt;&lt;/beans&gt;\n\n方式二: 开启annotation-driven默认都进行了配置\n12345678910111213141516&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txmlns:context=\"http://www.springframework.org/schema/context\"\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\txsi:schemaLocation=\"http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/mvc                           http://www.springframework.org/schema/mvc/spring-mvc.xsd                           http://www.springframework.org/schema/context                           http://www.springframework.org/schema/context/spring-context.xsd \"&gt;\t\t&lt;context:component-scan base-package=\"controller\"/&gt;\t&lt;mvc:annotation-driven/&gt;    &lt;mvc:default-servlet-handler/&gt;    &lt;/beans&gt;\n\n\n\n视图解析器\nprefix指定视图名称的前缀\nsuffix指定视图名称的后缀\n\n路径示意图\n\n\n12345678910111213141516171819&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txmlns:context=\"http://www.springframework.org/schema/context\"\txmlns:mvc=\"http://www.springframework.org/schema/mvc\"\txsi:schemaLocation=\"http://www.springframework.org/schema/beans                           http://www.springframework.org/schema/beans/spring-beans.xsd                           http://www.springframework.org/schema/mvc                           http://www.springframework.org/schema/mvc/spring-mvc.xsd                           http://www.springframework.org/schema/context                           http://www.springframework.org/schema/context/spring-context.xsd \"&gt;\t&lt;context:component-scan base-package=\"controller\"/&gt;\t&lt;mvc:annotation-driven/&gt;\t&lt;mvc:default-servlet-handler/&gt;\t&lt;bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\"&gt;\t\t&lt;property name=\"prefix\" value=\"/WEB-INF/views/\"/&gt;\t\t&lt;property name=\"suffix\" value=\".jsp\"/&gt;\t&lt;/bean&gt;&lt;/beans&gt;\n\n前端控制器DispatcherServlet前端控制器DispatcherServlet拦截路径\n\n*.action\n/  拦截所有(包括静态资源不包括jsp)\n/* 拦截所有(包括静态资源和jsp, 会导致跳转到jsp页面被拦截导致出错)\n\n123456789101112131415&lt;!DOCTYPE web-app PUBLIC \"-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN\" \"http://java.sun.com/dtd/web-app_2_3.dtd\" &gt;&lt;servlet&gt;    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;    &lt;servlet-class&gt;org.springframework.web.servlet.DispatcherServlet&lt;/servlet-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;contextConfigLocation&lt;/param-name&gt;        &lt;param-value&gt;classpath:springmvc.xml&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/servlet&gt;&lt;servlet-mapping&gt;    &lt;servlet-name&gt;dispatcherServlet&lt;/servlet-name&gt;    &lt;url-pattern&gt;/&lt;/url-pattern&gt;&lt;/servlet-mapping&gt;\n\n配置CharacterEncodingFilter解决POST乱码123456789101112&lt;filter&gt;    &lt;filter-name&gt;encoding&lt;/filter-name&gt;    &lt;filter-class&gt;org.springframework.web.filter.CharacterEncodingFilter&lt;/filter-class&gt;    &lt;init-param&gt;        &lt;param-name&gt;encoding&lt;/param-name&gt;        &lt;param-value&gt;UTF-8&lt;/param-value&gt;    &lt;/init-param&gt;&lt;/filter&gt;&lt;filter-mapping&gt;    &lt;filter-name&gt;encoding&lt;/filter-name&gt;    &lt;url-pattern&gt;/*&lt;/url-pattern&gt;&lt;/filter-mapping&gt;\n\nController编写12345678910111213141516171819202122232425262728293031323334353637package controller;import org.springframework.stereotype.Controller;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.servlet.ModelAndView;@Controllerpublic class MyController &#123;\t\t@RequestMapping(path=\"/index1\")\tpublic ModelAndView index() &#123;\t\tModelAndView mv = new ModelAndView();\t\tmv.addObject(\"message\", \"Index1\");\t\tmv.setViewName(\"index1\");\t\treturn mv;\t\t\t&#125;\t\t@RequestMapping(path=\"/index2\")\tpublic ModelAndView index2() &#123;\t\tModelAndView mv = new ModelAndView();\t\tmv.addObject(\"message\", \"Index2\");\t\tmv.setViewName(\"index2\");\t\treturn mv;\t\t\t&#125;\t\t@RequestMapping(path=\"/index3\")\tpublic ModelAndView index3() &#123;\t\tModelAndView mv = new ModelAndView();\t\tmv.addObject(\"message\", \"Index3\");\t\tmv.setViewName(\"index3\");\t\treturn mv;\t\t\t&#125;\t&#125;\n\nJSP编写1234567891011121314&lt;%@ page language=\"java\" contentType=\"text/html; charset=UTF-8\"    pageEncoding=\"UTF-8\"%&gt;&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;meta charset=\"UTF-8\"&gt;&lt;title&gt;Insert title here&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\t&lt;div&gt;\t\t&lt;%= request.getAttribute(\"message\") %&gt;\t&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;\n\n测试\n","thumbnail":"/post/SpringMVC入门/cover.jpg","plink":"https://beginc.github.io/post/SpringMVC入门/"},{"title":"MyBatis整合Spring","date":"2019-08-24T04:38:49.000Z","updated":"2019-08-28T16:40:51.012Z","content":"创建Maven项目编译设置12345678910111213141516&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\t&lt;groupId&gt;cn.edu.njust&lt;/groupId&gt;\t&lt;artifactId&gt;mybatis01&lt;/artifactId&gt;\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\t&lt;name&gt;mybatis01&lt;/name&gt;\t&lt;description&gt;mybatis01&lt;/description&gt;\t&lt;properties&gt;\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\t\t&lt;maven.compiler.source&gt;12&lt;/maven.compiler.source&gt;\t\t&lt;maven.compiler.target&gt;12&lt;/maven.compiler.target&gt;\t&lt;/properties&gt;&lt;/project&gt;\n\n引入依赖\nMySQL驱动\nJUnit\nMyBatis\nSpring\nmybatis-spring整合包\n\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;8.0.17&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.10&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-test&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.2.7&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-context&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-core&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-expression&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-aop&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-aspects&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.springframework&lt;/groupId&gt;        &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;        &lt;version&gt;4.2.4.RELEASE&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;javax.annotation&lt;/groupId&gt;        &lt;artifactId&gt;javax.annotation-api&lt;/artifactId&gt;        &lt;version&gt;1.3.2&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;        &lt;version&gt;1.2.2&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;\n\n建立pojo对象Student\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455package pojo;public class Student &#123;\tprivate int id;\tprivate String name;\tprivate CClass cclass;\tpublic Student() &#123;\t&#125;\tpublic Student(int id, String name, CClass cclass) &#123;\t\tsuper();\t\tthis.id = id;\t\tthis.name = name;\t\tthis.cclass = cclass;\t&#125;\t/**\t * @return the name\t */\tpublic String getName() &#123;\t\treturn name;\t&#125;\t/**\t * @param name the name to set\t */\tpublic void setName(String name) &#123;\t\tthis.name = name;\t&#125;\t/**\t * @return the cclass\t */\tpublic CClass getCclass() &#123;\t\treturn cclass;\t&#125;\t/**\t * @param cclass the cclass to set\t */\tpublic void setCclass(CClass cclass) &#123;\t\tthis.cclass = cclass;\t&#125;\t/**\t * \t * @return\t */\t@Override\tpublic String toString() &#123;\t\treturn \"Student [id=\" + id + \", name=\" + name + \", cclass=\" + cclass + \"]\";\t&#125;&#125;\n\nCClass\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071package pojo;import java.util.List;public class CClass &#123;\tprivate int id;\tprivate String name;\tprivate List&lt;Student&gt; students;\tpublic CClass() &#123;\t&#125;\tpublic CClass(int id, String name, List&lt;Student&gt; students) &#123;\t\tsuper();\t\tthis.id = id;\t\tthis.name = name;\t\tthis.students = students;\t&#125;\t/**\t * @return the id\t */\tpublic int getId() &#123;\t\treturn id;\t&#125;\t/**\t * @param id the id to set\t */\tpublic void setId(int id) &#123;\t\tthis.id = id;\t&#125;\t/**\t * @return the name\t */\tpublic String getName() &#123;\t\treturn name;\t&#125;\t/**\t * @param name the name to set\t */\tpublic void setName(String name) &#123;\t\tthis.name = name;\t&#125;\t/**\t * @return the students\t */\tpublic List&lt;Student&gt; getStudents() &#123;\t\treturn students;\t&#125;\t/**\t * @param students the students to set\t */\tpublic void setStudents(List&lt;Student&gt; students) &#123;\t\tthis.students = students;\t&#125;\t/**\t * \t * @return\t */\t@Override\tpublic String toString() &#123;\t\treturn \"CClass [id=\" + id + \", name=\" + name + \", students=\" + students + \"]\";\t&#125;&#125;\n\n为pojo对象建立SqlMap配置文件Student.xml\n123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"mapper.StudentMapper\"&gt;\t&lt;resultMap type=\"Student\" id=\"studentResultMap\"&gt;\t\t&lt;id column=\"sid\" property=\"id\"/&gt;\t\t&lt;result column=\"sname\" property=\"name\"/&gt;\t\t\t\t&lt;association property=\"cclass\" javaType=\"CClass\"&gt;\t\t\t&lt;id column=\"cid\" property=\"id\"/&gt;\t\t\t&lt;result column=\"cname\" property=\"name\"/&gt;\t\t&lt;/association&gt;\t&lt;/resultMap&gt;\t&lt;select id=\"findStudentById\" parameterType=\"Integer\" resultMap=\"studentResultMap\"&gt;\t\tselect student.id as sid, student.name as sname, age, class.id as cid, class.name as cname\t\tfrom student join class\t\ton student.classId = class.id\t\twhere student.id = #&#123;value&#125;\t&lt;/select&gt;&lt;/mapper&gt;\n\nCClass\n123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"mapper.CClassMapper\"&gt;\t&lt;resultMap type=\"CClass\" id=\"cclassResultMap\"&gt;\t\t&lt;id column=\"cid\" property=\"id\"/&gt;\t\t&lt;result column=\"cname\" property=\"name\"/&gt;\t\t\t\t&lt;collection property=\"students\" ofType=\"Student\"&gt;\t\t\t&lt;id column=\"sid\" property=\"id\"/&gt;\t\t\t&lt;result column=\"sname\" property=\"name\"/&gt;\t\t&lt;/collection&gt;\t&lt;/resultMap&gt;\t&lt;select id=\"findCClassById\" parameterType=\"Integer\" resultMap=\"cclassResultMap\"&gt;\t\tselect class.id as cid, class.name as cname, student.id as sid, student.name as sname, age\t\tfrom student join class\t\ton student.classId = class.id\t\twhere class.id = #&#123;value&#125;\t&lt;/select&gt;&lt;/mapper&gt;\n\n配置SqlMapConfig.xml\n只需配置mappers\n\n1234567891011121314&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt;\t&lt;typeAliases&gt;\t\t&lt;package name=\"pojo\"/&gt;\t&lt;/typeAliases&gt;\t\t&lt;mappers&gt;\t\t&lt;mapper resource=\"sqlmap/Student.xml\"/&gt;\t\t&lt;mapper resource=\"sqlmap/CClass.xml\"/&gt;\t&lt;/mappers&gt;&lt;/configuration&gt;\n\nDAO开发配置applicationContext.xml\ndataSource\nSqlSessionFactory\n注入dataSource\n注入SqlMapConfig.xml的位置\n\n\n\n123456789101112131415161718192021222324252627&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;&lt;beans xmlns=\"http://www.springframework.org/schema/beans\"\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txmlns:context=\"http://www.springframework.org/schema/context\"\txmlns:aop=\"http://www.springframework.org/schema/aop\"\txmlns:tx=\"http://www.springframework.org/schema/tx\"\txsi:schemaLocation=\"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd\"&gt;    &lt;bean id=\"dataSource\" class=\"org.springframework.jdbc.datasource.DriverManagerDataSource\"&gt;\t\t&lt;property name=\"driverClassName\" value=\"com.mysql.cj.jdbc.Driver\"/&gt;\t\t&lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\"/&gt;\t\t&lt;property name=\"username\" value=\"root\"/&gt;\t\t&lt;property name=\"password\" value=\"Hgld521125\"/&gt;\t&lt;/bean&gt;\t\t&lt;bean id=\"sqlSessionFactory\" class=\"org.mybatis.spring.SqlSessionFactoryBean\"&gt;\t\t&lt;property name=\"dataSource\" ref=\"dataSource\"/&gt;\t\t&lt;property name=\"configLocation\" value=\"classpath:SqlMapConfig.xml\"/&gt;\t&lt;/bean&gt;&lt;/beans&gt;\n\nDAO + DAOImplStudentDAO\n1234567package dao;import pojo.Student;public interface StudentDAO &#123;\tpublic Student findStudentById(Integer id);&#125;\n\nStudentDAOImpl\n\n继承SqlSessionDaoSupport\n通过this.getSqlSession来获取SqlSession\nSpring管理SqlSessionFactory的时候不允许手动关闭session\n\n1234567891011121314151617package dao.impl;import org.apache.ibatis.session.SqlSession;import org.mybatis.spring.support.SqlSessionDaoSupport;import dao.StudentDAO;import pojo.Student;public class StudentDAOImpl extends SqlSessionDaoSupport implements StudentDAO &#123;\tpublic Student findStudentById(Integer id) &#123;\t\tSqlSession session = this.getSqlSession();\t\tStudent student = session.selectOne(\"findStudentById\", 1);\t\t// session.close();\t\treturn student;\t&#125;&#125;\n\n为StudentDAOImpl注入SqlSessionFacotry\n123&lt;bean id=\"studentDAO\" class=\"dao.impl.StudentDAOImpl\"&gt;    &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"/&gt;&lt;/bean&gt;\n\n编写测试123456789101112@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(\"classpath:applicationContext.xml\")public class Test01 &#123;\t@Resource(name = \"studentDAO\")\tprivate StudentDAO studentDAO;\t@Test\tpublic void test01() &#123;\t\tStudent student = this.studentDAO.findStudentById(1);\t\tSystem.out.println(student);\t&#125;&#125;\n\nMapper动态代理开发建立mapper1234567package mapper;import pojo.CClass;public interface CClassMapper &#123;\tpublic CClass findCClassById(Integer id);&#125;\n\n配置applicationContext.xml同\n方式一: MapperFactoryBean\n该工厂负责生产动态代理产生的mapper\n注入sqlSessionFactory\n注入mapperInterface\n\n1234&lt;bean id=\"cclassMapper\" class=\"org.mybatis.spring.mapper.MapperFactoryBean\"&gt;    &lt;property name=\"sqlSessionFactory\" ref=\"sqlSessionFactory\"/&gt;    &lt;property name=\"mapperInterface\" value=\"mapper.CClassMapper\"/&gt;&lt;/bean&gt;\n\n编写测试\n1234567891011@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(\"classpath:applicationContext.xml\")public class Test01 &#123;\t@Resource(name = \"cclassMapper\")\tprivate CClassMapper mapper;\t@Test\tpublic void test02() &#123;\t\tSystem.out.println(mapper.findCClassById(1));\t&#125;&#125;\n\n方式二: MapperScannerConfigurer\n自动注入sqlSessionFactory\n自动扫描包(及其子包)管理mapper(无需手动为每个mapper配置MapperFactoryBean)\n无需设置id, 直接用mapper名.class在context中获取mapper\n\n编写测试\n\n开启自动扫描, 无法通过name注入mapper, 必须通过context.getBean(CClassMapper.class)获取mapper或者使用@Autowired按类型注入mapper\n\n1234567891011@RunWith(SpringJUnit4ClassRunner.class)@ContextConfiguration(\"classpath:applicationContext.xml\")public class Test01 &#123;\t@Autowired\tprivate CClassMapper mapper;\t@Test\tpublic void test02() &#123;\t\tSystem.out.println(mapper.findCClassById(1));\t&#125;&#125;\n\n","thumbnail":"/post/MyBatis整合Spring/cover.jpg","plink":"https://beginc.github.io/post/MyBatis整合Spring/"},{"title":"MyBatis关联查询","date":"2019-08-24T01:58:29.000Z","updated":"2019-08-28T16:41:20.998Z","content":"环境搭建详见\n\n创建Maven项目\n引入依赖\n配置SqlMapConfig.xml\n建立pojo对象\n为pojo对象建立SqlMap配置文件\n\nStudent\n\n用CClass对象表示与CClass的一对一关联\n\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556package pojo;public class Student &#123;\tprivate int id;\tprivate String name;\tprivate CClass cclass;\tpublic Student() &#123;\t&#125;\tpublic Student(int id, String name, CClass cclass) &#123;\t\tsuper();\t\tthis.id = id;\t\tthis.name = name;\t\tthis.cclass = cclass;\t&#125;\t/**\t * @return the name\t */\tpublic String getName() &#123;\t\treturn name;\t&#125;\t/**\t * @param name the name to set\t */\tpublic void setName(String name) &#123;\t\tthis.name = name;\t&#125;\t/**\t * @return the cclass\t */\tpublic CClass getCclass() &#123;\t\treturn cclass;\t&#125;\t/**\t * @param cclass the cclass to set\t */\tpublic void setCclass(CClass cclass) &#123;\t\tthis.cclass = cclass;\t&#125;\t/**\t * \t * @return\t */\t@Override\tpublic String toString() &#123;\t\treturn \"Student [id=\" + id + \", name=\" + name + \", cclass=\" + cclass + \"]\";\t&#125;&#125;\n\nCClass\n\n用List&lt;Student&gt; students来表示与学生的一对多关联\n\n123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172package pojo;import java.util.List;public class CClass &#123;\tprivate int id;\tprivate String name;\tprivate List&lt;Student&gt; students;\tpublic CClass() &#123;\t&#125;\tpublic CClass(int id, String name, List&lt;Student&gt; students) &#123;\t\tsuper();\t\tthis.id = id;\t\tthis.name = name;\t\tthis.students = students;\t&#125;\t/**\t * @return the id\t */\tpublic int getId() &#123;\t\treturn id;\t&#125;\t/**\t * @param id the id to set\t */\tpublic void setId(int id) &#123;\t\tthis.id = id;\t&#125;\t/**\t * @return the name\t */\tpublic String getName() &#123;\t\treturn name;\t&#125;\t/**\t * @param name the name to set\t */\tpublic void setName(String name) &#123;\t\tthis.name = name;\t&#125;\t/**\t * @return the students\t */\tpublic List&lt;Student&gt; getStudents() &#123;\t\treturn students;\t&#125;\t/**\t * @param students the students to set\t */\tpublic void setStudents(List&lt;Student&gt; students) &#123;\t\tthis.students = students;\t&#125;\t/**\t * \t * @return\t */\t@Override\tpublic String toString() &#123;\t\treturn \"CClass [id=\" + id + \", name=\" + name + \", students=\" + students + \"]\";\t&#125;&#125;\n\n一对一关联查询需求\n根据id查询学生, 并查询出其班级信息\n\n编写SqlMap.xml\n返回值应该用resultMap进行映射\nassociation指定一对一映射两者都需要指定自己的id`\nassociation中的property指的是该CClass在Student对象中属性的名称\nassociation中的javaType指的是关联的对象的类型\n\n123456789101112131415&lt;resultMap type=\"Student\" id=\"studentResultMap\"&gt;    &lt;id column=\"sid\" property=\"id\"/&gt;    &lt;result column=\"sname\" property=\"name\"/&gt;        &lt;association property=\"cclass\" javaType=\"CClass\"&gt;        &lt;id column=\"cid\" property=\"id\"/&gt;        &lt;result column=\"cname\" property=\"name\"/&gt;    &lt;/association&gt;&lt;/resultMap&gt;&lt;select id=\"findById\" parameterType=\"Integer\" resultMap=\"studentResultMap\"&gt;    select student.id as sid, student.name as sname, age, class.id as cid, class.name as cname    from student join class    on student.classId = class.id    where student.id = #&#123;value&#125;&lt;/select&gt;\n\n编写测试1234567@Testpublic void test01() &#123;    SqlSession session = this.factory.openSession();    Student student = session.selectOne(\"findById\", 1);    System.out.println(student);    session.close();&#125;\n\n一对多测试需求\n根据id查询班级, 并查询出班级所有的学生\n\n编写SqlMap.xml\n返回值应该用resultMap进行映射\ncollection指定一对多映射两者都需要指定自己的id`\ncollection中的property指的是该Student集合在CClass对象中属性的名称\ncollection中的ofType指的是关联的对象集合的泛型\n\n123456789101112131415&lt;resultMap type=\"CClass\" id=\"cclassResultMap\"&gt;    &lt;id column=\"cid\" property=\"id\"/&gt;    &lt;result column=\"cname\" property=\"name\"/&gt;        &lt;collection property=\"students\" ofType=\"Student\"&gt;        &lt;id column=\"sid\" property=\"id\"/&gt;        &lt;result column=\"sname\" property=\"name\"/&gt;    &lt;/collection&gt;&lt;/resultMap&gt;&lt;select id=\"findCClassById\" parameterType=\"Integer\" resultMap=\"cclassResultMap\"&gt;    select class.id as cid, class.name as cname, student.id as sid, student.name as sname, age    from student join class    on student.classId = class.id    where class.id = #&#123;value&#125;&lt;/select&gt;\n\n编写测试1234567@Testpublic void test02() &#123;    SqlSession session = this.factory.openSession();    CClass cclass = session.selectOne(\"findCClassById\", 1);    System.out.println(cclass);    session.close();&#125;","thumbnail":"/post/MyBatis关联查询/cover.jpg","plink":"https://beginc.github.io/post/MyBatis关联查询/"},{"title":"MyBatis动态SQL","date":"2019-08-24T01:12:43.000Z","updated":"2019-08-28T16:41:29.096Z","content":"环境搭建详见\n\n创建Maven项目\n引入依赖\n配置SqlMapConfig.xml\n建立pojo对象\n为pojo对象建立SqlMap配置文件\n\nIf-Where标签需求\n根据名字和年龄查询用户\n\n编写SqlMap文件\n用If来判断name和age是否存在, 仅当存在时才作为查询条件\nWhere可用于处理条件语句, 还可以去掉前导and(当只有age做条件时, 需要去掉前面的and)\n\n1234567891011&lt;select id=\"findByNameAndAge\" parameterType=\"User\" resultType=\"User\"&gt;    select * from user    &lt;where&gt;        &lt;if test=\"name != null and name != ''\"&gt;            name = #&#123;name&#125;        &lt;/if&gt;        &lt;if test=\"age != null\"&gt;            and age = #&#123;age&#125;        &lt;/if&gt;    &lt;/where&gt;&lt;/select&gt;\n\n编写测试1234567891011121314151617181920212223242526272829303132333435363738394041@Testpublic void test01() &#123;    SqlSession session = this.factory.openSession();    User query;    List&lt;User&gt; users;        // 两个条件都有    query = new User();    query.setName(\"Rylynn\");    query.setAge(18);    users = session.selectList(\"findByNameAndAge\", query);    for (User user : users) &#123;        System.out.println(user);    &#125;    System.out.println();        // 只有名字    query = new User();    query.setName(\"Bob\");    users = session.selectList(\"findByNameAndAge\", query);    for (User user : users) &#123;        System.out.println(user);    &#125;    System.out.println();        // 只有年龄    query = new User();    query.setAge(1);    users = session.selectList(\"findByNameAndAge\", query);    for (User user : users) &#123;        System.out.println(user);    &#125;        // 都没有    query = new User();    users = session.selectList(\"findByNameAndAge\", query);    for (User user : users) &#123;        System.out.println(user);    &#125;    session.close();&#125;\n\nForEach标签需求\n给定一串id, 查找id在其中的用户(不定数量的id)\n\n编写SqlMap文件\ncollection指定要遍历的数组或集合\nitem指定取出的元素名\nopen指定前缀\nclose指定后缀\nseperator指定分隔符\n\n数组\n数组类型可写为iterator\n传数组时, 名字必须为array\n\n123456&lt;select id=\"findByIdsArray\" parameterType=\"iterator\" resultType=\"User\"&gt;    select * from user where id in    &lt;foreach collection=\"array\" item=\"id\" open=\"(\" close=\")\" separator=\",\"&gt;        #&#123;id&#125;    &lt;/foreach&gt;&lt;/select&gt;\n\nList\nList类型可写成list\n传List时, 名字必须为list\n\n123456&lt;select id=\"findByIdsList\" parameterType=\"list\" resultType=\"User\"&gt;    select * from user where id in    &lt;foreach collection=\"list\" item=\"id\" open=\"(\" close=\")\" separator=\",\"&gt;        #&#123;id&#125;    &lt;/foreach&gt;&lt;/select&gt;\n\n测试样例\n12345678910111213@Testpublic void test03() &#123;    SqlSession session = this.factory.openSession();    ArrayList&lt;Integer&gt; ids = new ArrayList&lt;Integer&gt;();    ids.add(11);    ids.add(6);    ids.add(7);    List&lt;User&gt; users = session.selectList(\"findByIdsList\", ids);    for (User user : users) &#123;        System.out.println(user);    &#125;    session.close();&#125;\n\nSQL片段\n可用于提取常用的一些SQL片段\n\n123456789&lt;sql id=\"selectAllUser\"&gt;    select * from user&lt;/sql&gt;&lt;select id=\"findByIdsList\" parameterType=\"list\" resultType=\"User\"&gt;    &lt;include refid=\"selectAllUser\"/&gt; where id in    &lt;foreach collection=\"list\" item=\"id\" open=\"(\" close=\")\" separator=\",\"&gt;        #&#123;id&#125;    &lt;/foreach&gt;&lt;/select&gt;","thumbnail":"/post/MyBatis动态SQL/cover.jpg","plink":"https://beginc.github.io/post/MyBatis动态SQL/"},{"title":"MyBatis动态代理开发","date":"2019-08-23T15:52:46.000Z","updated":"2019-08-28T16:41:33.893Z","content":"环境搭建详见\n\n创建Maven项目\n引入依赖\n配置SqlMapConfig.xml\n建立pojo对象\n为pojo对象建立SqlMap配置文件\n\nMyBatis动态代理开发规范\nmapper方法名与SqlMap文件中对应statement的id一致\nmapper返回值类型与SqlMap文件中对应statement的返回类型一致\nmapper参数类型与SqlMap文件中对应statement的参数类型一致\nSqlMap中namespace必须为Mapper接口的全称\n\n建立UserMapper新建包mapper, 建立UserMapper接口\n1234567891011public interface UserMapper &#123;\tpublic User findById(Integer id);\tpublic List&lt;User&gt; findByName(String name);\tpublic void insertUser(User user);\tpublic void updateUser(User user);\tpublic void deleteUser(Integer id);&#125;\n\n修改User.xml中的namespace123456789101112131415161718192021222324&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"mapper.UserMapper\"&gt;\t&lt;select id=\"findById\" parameterType=\"Integer\" resultType=\"pojo.User\"&gt;\t\tselect * from user where id = #&#123;value&#125;\t&lt;/select&gt;\t&lt;select id=\"findByName\" parameterType=\"String\" resultType=\"pojo.User\"&gt;\t\tselect * from user where name like '%$&#123;value&#125;%'\t&lt;/select&gt;\t&lt;insert id=\"insertUser\" parameterType=\"pojo.User\"&gt;\t\t&lt;selectKey keyProperty=\"id\" order=\"AFTER\" resultType=\"Integer\"&gt;\t\t\tselect LAST_INSERT_ID()\t\t&lt;/selectKey&gt;\t\tinsert into user (name, age) values (#&#123;name&#125;, #&#123;age&#125;)\t&lt;/insert&gt;\t&lt;update id=\"updateUser\" parameterType=\"pojo.User\"&gt;\t\tupdate user set name=#&#123;name&#125;, age=#&#123;age&#125; where id=#&#123;id&#125;\t&lt;/update&gt;\t&lt;delete id=\"deleteUser\" parameterType=\"Integer\"&gt;\t\tdelete from user where id=#&#123;value&#125;\t&lt;/delete&gt;&lt;/mapper&gt;\n\n编写测试\n通过SqlSession获取Mapper\n调用Mapper的方法\n\n1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465public class Test02 &#123;\tprivate SqlSessionFactory factory;\t\t@Before\tpublic void setUp() throws IOException &#123;\t\tthis.factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(\"SqlMapConfig.xml\"));\t&#125;\t\t@Test\tpublic void test01() &#123;\t\tSqlSession session = this.factory.openSession();\t\tUserMapper mapper = session.getMapper(UserMapper.class);\t\t\t\tUser user = mapper.findById(7);\t\tSystem.out.println(user);\t\tsession.close();\t&#125;\t@Test\tpublic void test02() &#123;\t\tSqlSession session = this.factory.openSession();\t\tUserMapper mapper = session.getMapper(UserMapper.class);\t\tList&lt;User&gt; users = mapper.findByName(\"Rylynn\");\t\tfor (User user : users) &#123;\t\t\tSystem.out.println(user);\t\t&#125;\t\tsession.close();\t&#125;\t\t@Test\tpublic void test03() &#123;\t\tSqlSession session = this.factory.openSession();\t\tUserMapper mapper = session.getMapper(UserMapper.class);\t\tUser user = new User();\t\tuser.setName(\"BCD\");\t\tuser.setAge(50);\t\tmapper.insertUser(user);\t\tSystem.out.println(user);\t\tsession.commit();\t\tsession.close();\t&#125;\t\t@Test\tpublic void test04() &#123;\t\tSqlSession session = this.factory.openSession();\t\tUserMapper mapper = session.getMapper(UserMapper.class);\t\tUser user = new User();\t\tuser.setId(5);\t\tuser.setName(\"BCD\");\t\tuser.setAge(57);\t\tmapper.updateUser(user);\t\tsession.commit();\t\tsession.close();\t&#125;\t\t@Test\tpublic void test05() &#123;\t\tSqlSession session = this.factory.openSession();\t\tUserMapper mapper = session.getMapper(UserMapper.class);\t\tmapper.deleteUser(8);\t\tsession.commit();\t\tsession.close();\t&#125;&#125;\n\n","thumbnail":"/post/MyBatis动态代理开发/cover.jpg","plink":"https://beginc.github.io/post/MyBatis动态代理开发/"},{"title":"MyBatis入门","date":"2019-08-23T13:49:25.000Z","updated":"2019-08-28T16:41:15.503Z","content":"创建Maven项目编译设置12345678910111213141516&lt;project xmlns=\"http://maven.apache.org/POM/4.0.0\"\txmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\txsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\"&gt;\t&lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt;\t&lt;groupId&gt;cn.edu.njust&lt;/groupId&gt;\t&lt;artifactId&gt;mybatis01&lt;/artifactId&gt;\t&lt;version&gt;0.0.1-SNAPSHOT&lt;/version&gt;\t&lt;name&gt;mybatis01&lt;/name&gt;\t&lt;description&gt;mybatis01&lt;/description&gt;\t&lt;properties&gt;\t\t&lt;project.build.sourceEncoding&gt;UTF-8&lt;/project.build.sourceEncoding&gt;\t\t&lt;maven.compiler.source&gt;12&lt;/maven.compiler.source&gt;\t\t&lt;maven.compiler.target&gt;12&lt;/maven.compiler.target&gt;\t&lt;/properties&gt;&lt;/project&gt;\n\n引入依赖\nMySQL驱动\nJUnit\nMyBatis\n\n1234567891011121314151617&lt;dependencies&gt;    &lt;dependency&gt;        &lt;groupId&gt;mysql&lt;/groupId&gt;        &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;        &lt;version&gt;8.0.17&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;org.mybatis&lt;/groupId&gt;        &lt;artifactId&gt;mybatis&lt;/artifactId&gt;        &lt;version&gt;3.2.7&lt;/version&gt;    &lt;/dependency&gt;    &lt;dependency&gt;        &lt;groupId&gt;junit&lt;/groupId&gt;        &lt;artifactId&gt;junit&lt;/artifactId&gt;        &lt;version&gt;4.10&lt;/version&gt;    &lt;/dependency&gt;&lt;/dependencies&gt;\n\n配置SqlMapConfig.xml在src/main/resource下建立SqlMapConfig.xml配置文件, 配置数据源和事务管理器\n1234567891011121314151617&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt;\t&lt;environments default=\"dev\"&gt;\t\t&lt;environment id=\"dev\"&gt;\t\t\t&lt;transactionManager type=\"JDBC\"/&gt;\t\t\t&lt;dataSource type=\"POOLED\"&gt;\t\t\t\t&lt;property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/&gt;\t\t\t\t&lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\"/&gt;\t\t\t\t&lt;property name=\"username\" value=\"root\"/&gt;\t\t\t\t&lt;property name=\"password\" value=\"Hgld51125\"/&gt;\t\t\t&lt;/dataSource&gt;\t\t&lt;/environment&gt;\t&lt;/environments&gt;&lt;/configuration&gt;\n\n建立pojo对象必须提供一个无参数的构造方法\n12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970package pojo;public class User &#123;\tprivate int id;\tprivate String name;\tprivate int age;\t\tpublic User() &#123;\t\t\t&#125;\tpublic User(int id, String name, int age) &#123;\t\tsuper();\t\tthis.id = id;\t\tthis.name = name;\t\tthis.age = age;\t&#125;\t/**\t * @return the id\t */\tpublic int getId() &#123;\t\treturn id;\t&#125;\t/**\t * @param id the id to set\t */\tpublic void setId(int id) &#123;\t\tthis.id = id;\t&#125;\t/**\t * @return the name\t */\tpublic String getName() &#123;\t\treturn name;\t&#125;\t/**\t * @param name the name to set\t */\tpublic void setName(String name) &#123;\t\tthis.name = name;\t&#125;\t/**\t * @return the age\t */\tpublic int getAge() &#123;\t\treturn age;\t&#125;\t/**\t * @param age the age to set\t */\tpublic void setAge(int age) &#123;\t\tthis.age = age;\t&#125;\t/**\t * \t * @return\t */\t@Override\tpublic String toString() &#123;\t\treturn \"User [id=\" + id + \", name=\" + name + \", age=\" + age + \"]\";\t&#125;&#125;\n\n为pojo对象建立SqlMap配置文件在src/main/resource下建立一个sqlmap文件夹, 建立User.xml\n1234567&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"User\"&gt;&lt;/mapper&gt;\n\n在SqlMapConfig.xml中引用该SqlMap文件\n123456789101112131415161718192021&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE configurationPUBLIC \"-//mybatis.org//DTD Config 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-config.dtd\"&gt;&lt;configuration&gt;\t&lt;environments default=\"dev\"&gt;\t\t&lt;environment id=\"dev\"&gt;\t\t\t&lt;transactionManager type=\"JDBC\"/&gt;\t\t\t&lt;dataSource type=\"POOLED\"&gt;\t\t\t\t&lt;property name=\"driver\" value=\"com.mysql.cj.jdbc.Driver\"/&gt;\t\t\t\t&lt;property name=\"url\" value=\"jdbc:mysql://localhost:3306/test?serverTimezone=UTC\"/&gt;\t\t\t\t&lt;property name=\"username\" value=\"root\"/&gt;\t\t\t\t&lt;property name=\"password\" value=\"Hgld521125\"/&gt;\t\t\t&lt;/dataSource&gt;\t\t&lt;/environment&gt;\t&lt;/environments&gt;\t\t&lt;mappers&gt;\t\t&lt;mapper resource=\"sqlmap/User.xml\"/&gt;\t&lt;/mappers&gt;&lt;/configuration&gt;\n\n实现基本需求查询单个User编写SqlMap\nid标识该语句\nparameterType指定了参数类型\nresultType指定了返回值类型\n#{value}引用参数, 此处value可为任意名称\n\n123456789&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"User\"&gt;\t&lt;select id=\"findById\" parameterType=\"Integer\" resultType=\"pojo.User\"&gt;\t\tselect * from user where id = #&#123;value&#125;\t&lt;/select&gt;&lt;/mapper&gt;\n\n此处使用resultType指定返回类型， 需保证数据库字段名和pojo属性名一致, 否则应使用resultMap\n1234567891011121314&lt;?xml version=\"1.0\" encoding=\"UTF-8\" ?&gt;&lt;!DOCTYPE mapperPUBLIC \"-//mybatis.org//DTD Mapper 3.0//EN\"\"http://mybatis.org/dtd/mybatis-3-mapper.dtd\"&gt;&lt;mapper namespace=\"User\"&gt;\t&lt;resultMap type=\"User\" id=\"userMap\"&gt;\t\t&lt;id column=\"id\" property=\"id\"/&gt;\t\t&lt;result column=\"name\" property=\"name\"/&gt;\t\t&lt;result column=\"age\" property=\"age\"/&gt;\t&lt;/resultMap&gt;\t&lt;select id=\"findById\" parameterType=\"Integer\" resultMap=\"userMap\"&gt;\t\tselect * from user where id = #&#123;value&#125;\t&lt;/select&gt;&lt;/mapper&gt;\n\n编写测试\n由于src/main/resource目录下的文件最终会在src下, 所以可直接读取SqlMapConfig.xml\n\n12345678910111213141516public class Test01 &#123;\tprivate SqlSessionFactory factory;\t\t@Before\tpublic void setUp() throws IOException &#123;\t\tthis.factory = new SqlSessionFactoryBuilder().build(Resources.getResourceAsStream(\"SqlMapConfig.xml\"));\t&#125;\t\t@Test\tpublic void test01() &#123;\t\tSqlSession session = this.factory.openSession();\t\tUser user = session.selectOne(\"findById\", 5);\t\tSystem.out.println(user);\t\tsession.close();\t&#125;&#125;\n\n模糊查询多个User编写SqlMap\n${}用于单纯的字符串拼接(字符串两边不会加’)\n${}对于基本类型, 必须填value!!\n\n123&lt;select id=\"findByName\" parameterType=\"String\" resultType=\"pojo.User\"&gt;    select * from user where name like '%$&#123;value&#125;%'&lt;/select&gt;\n\n编写测试123456789@Testpublic void test02() &#123;    SqlSession session = this.factory.openSession();    List&lt;User&gt; users = session.selectList(\"findByName\", \"Rylynn\");    for (User user : users) &#123;        System.out.println(user);    &#125;    session.close();&#125;\n\n添加User编写SqlMap\n传入参数类型为User\n无返回参数(session.insert会返回一个int)\n用#{name}这样的ognl表达式从入参中解析属性\nselectKey用于插入数据后将生成的key填充到入参中\nkeyProperty指定User为主键的属性\norder指定key是在数据保存前生成的还是保存后生成的\nMySQL AFTER\nOracle BEFORE\n\n\nresultType指定selectKey的返回值类型\n\n123456&lt;insert id=\"insertUser\" parameterType=\"pojo.User\"&gt;    &lt;selectKey keyProperty=\"id\" order=\"AFTER\" resultType=\"Integer\"&gt;        select LAST_INSERT_ID()    &lt;/selectKey&gt;    insert into user (name, age) values (#&#123;name&#125;, #&#123;age&#125;)&lt;/insert&gt;\n\n编写测试\n默认需要手动提交事务session.commit()\n\n1234567891011@Testpublic void test03() &#123;    SqlSession session = this.factory.openSession();    User user = new User();    user.setName(\"BCD\");    user.setAge(50);    session.insert(\"insertUser\", user);    System.out.println(user);    session.commit();    session.close();&#125;\n\n更新User编写SqlMap123&lt;update id=\"updateUser\" parameterType=\"pojo.User\"&gt;    update user set name=#&#123;name&#125;, age=#&#123;age&#125; where id=#&#123;id&#125;&lt;/update&gt;\n\n编写测试\n默认需要手动提交事务session.commit()\n\n1234567891011@Testpublic void test04() &#123;    SqlSession session = this.factory.openSession();    User user = new User();    user.setId(5);    user.setName(\"BCD\");    user.setAge(57);    session.update(\"updateUser\", user);    session.commit();    session.close();&#125;\n\n删除User编写SqlMap123&lt;delete id=\"deleteUser\" parameterType=\"Integer\"&gt;    delete from user where id=#&#123;value&#125;&lt;/delete&gt;\n\n编写测试\n默认需要手动提交事务session.commit()\n\n1234567@Testpublic void test05() &#123;    SqlSession session = this.factory.openSession();    session.delete(\"deleteUser\", 5);    session.commit();    session.close();&#125;\n\n","thumbnail":"/post/MyBatis入门/cover.jpg","plink":"https://beginc.github.io/post/MyBatis入门/"}]