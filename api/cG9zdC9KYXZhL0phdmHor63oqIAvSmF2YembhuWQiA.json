{"title":"Java集合","date":"2019-09-07T14:57:07.000Z","date_formatted":{"ll":"Sep 7, 2019","L":"09/07/2019","MM-DD":"09-07"},"thumbnail":"post/Java/Java语言/Java集合/cover.jpg","link":"post/Java/Java语言/Java集合","categories":["Java","Java语言"],"updated":"2020-01-08T08:31:06.570Z","content":"<h1 id=\"java集合体系简介\">Java集合体系简介<a href=\"#java集合体系简介\" title=\"Java集合体系简介\"></a></h1><h2 id=\"collection接口\">Collection接口<a href=\"#collection接口\" title=\"Collection接口\"></a></h2><p>所有集合类的根接口。</p>\n<h2 id=\"list接口\">List接口<a href=\"#list接口\" title=\"List接口\"></a></h2><p>一种有序列表的集合。</p>\n<h2 id=\"set接口\">Set接口<a href=\"#set接口\" title=\"Set接口\"></a></h2><p>一种保证没有重复元素的集合。</p>\n<h2 id=\"map接口\">Map接口<a href=\"#map接口\" title=\"Map接口\"></a></h2><p>一种通过键值查找的映射表集合。</p>\n<h2 id=\"iterator\">Iterator<a href=\"#iterator\" title=\"Iterator\"></a></h2><p>Java统一访问集合的方式。</p>\n<h1 id=\"list\">List<a href=\"#list\" title=\"List\"></a></h1><p><strong>创建</strong>\n<code>List.of(...)</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;Integer&gt; list = List.of(<span class=\"number\">1</span>, <span class=\"number\">2</span>, <span class=\"number\">3</span>, <span class=\"number\">4</span>);</span><br><span class=\"line\"><span class=\"keyword\">for</span> (Integer item : list) &#123;</span><br><span class=\"line\">    System.out.println(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>访问</strong>\n<code>void add(E e)</code>在末尾添加一个元素：\n<code>void add(int index, E e)</code>在指定索引添加一个元素\n<code>int remove(int index)</code>删除指定索引的元素\n<code>int remove(Object e)</code>删除某个元素\n<code>E get(int index)</code>获取指定索引的元素\n<code>int size()</code>获取链表大小（包含元素的个数）</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">List&lt;String&gt; list = <span class=\"keyword\">new</span> ArrayList&lt;&gt;();</span><br><span class=\"line\">list.add(<span class=\"string\">\"1\"</span>);</span><br><span class=\"line\">list.add(<span class=\"string\">\"2\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String item : list) &#123;</span><br><span class=\"line\">    System.out.println(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">list.remove(<span class=\"number\">0</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String item : list) &#123;</span><br><span class=\"line\">    System.out.println(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\">System.out.println(list.get(<span class=\"number\">0</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">list.add(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// Hello</span></span><br><span class=\"line\">System.out.println(list.get(<span class=\"number\">1</span>));</span><br><span class=\"line\"></span><br><span class=\"line\">list.remove(<span class=\"string\">\"Hello\"</span>);</span><br><span class=\"line\"><span class=\"comment\">// 2</span></span><br><span class=\"line\"><span class=\"keyword\">for</span> (String item : list) &#123;</span><br><span class=\"line\">    System.out.println(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"comment\">// 1</span></span><br><span class=\"line\">System.out.println(list.size());</span><br></pre></td></tr></table></figure>\n\n<p><strong>与数组的相互转换</strong></p>\n<ol><li><code>Object[] toArray()</code>\n缺点是丢失了类型信息</li>\n</ol><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Object[] array = list.toArray();</span><br></pre></td></tr></table></figure>\n\n<ol><li><code>Object[] toArray(T[])</code>\n传入一个类型相同的数组，<code>List</code>内部自动把元素复制到传入的<code>Array</code>中。</li>\n</ol><ul><li>如果传入的数组不够大，那么List内部会创建一个新的刚好够大的数组，填充后返回。</li>\n<li>如果传入的数组比List元素还要多，那么填充完元素后，剩下的数组元素一律填充null。</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Integer[] array = list.toArray(<span class=\"keyword\">new</span> Integer[<span class=\"number\">4</span>]);</span><br></pre></td></tr></table></figure>\n\n\n\n<h2 id=\"实现类\">实现类<a href=\"#实现类\" title=\"实现类\"></a></h2><h3 id=\"arraylist\">ArrayList<a href=\"#arraylist\" title=\"ArrayList\"></a></h3><p>底层实现为数组。</p>\n<h3 id=\"linkedlist\">LinkedList<a href=\"#linkedlist\" title=\"LinkedList\"></a></h3><p>底层实现为链表。</p>\n","prev":{"title":"CentOS网络配置","link":"post/Linux/CentOS网络配置"},"next":{"title":"Pipeline框架设计---Registry","link":"post/Python/Pipeline框架设计-Registry"},"plink":"https://beginc.github.io/post/Java/Java语言/Java集合/","toc":[{"id":"java集合体系简介","title":"Java集合体系简介","index":"1","children":[{"id":"collection接口","title":"Collection接口","index":"1.1"},{"id":"list接口","title":"List接口","index":"1.2"},{"id":"set接口","title":"Set接口","index":"1.3"},{"id":"map接口","title":"Map接口","index":"1.4"},{"id":"iterator","title":"Iterator","index":"1.5"}]},{"id":"list","title":"List","index":"2","children":[{"id":"实现类","title":"实现类","index":"2.1","children":[{"id":"arraylist","title":"ArrayList","index":"2.1.1"},{"id":"linkedlist","title":"LinkedList","index":"2.1.2"}]}]}]}