{"title":"9-Spring之扩展","date":"2020-02-29T09:12:50.000Z","date_formatted":{"ll":"Feb 29, 2020","L":"02/29/2020","MM-DD":"02-29"},"thumbnail":"post/Java/Spring/9-Spring之扩展/cover.png","link":"post/Java/Spring/9-Spring之扩展","categories":["Java","Spring"],"updated":"2020-03-06T08:39:11.605Z","content":"<h1 id=\"beanfactorypostprocessor\">BeanFactoryPostProcessor<a href=\"#beanfactorypostprocessor\" title=\"BeanFactoryPostProcessor\"></a></h1><h2 id=\"接口\">接口<a href=\"#接口\" title=\"接口\"></a></h2><p>BeanFactoryPostProcessor</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBeanFactoryPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanFactoryPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用时机\">调用时机<a href=\"#调用时机\" title=\"调用时机\"></a></h2><p>所有BeanDefinition已经加载完毕，但是还未开始创建Bean。</p>\n<h2 id=\"作用\">作用<a href=\"#作用\" title=\"作用\"></a></h2><ul><li>我们可以通过BeanFactory获取BeanDefinition，在其初始化之前对BeanDefinition进行修改。</li>\n</ul><figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">beanFactory.getBeanDefinition(<span class=\"string\">\"bean\"</span>);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用\">应用<a href=\"#应用\" title=\"应用\"></a></h2><p>TODO</p>\n<h1 id=\"beandefinitionregistrypostprocessor\">BeanDefinitionRegistryPostProcessor<a href=\"#beandefinitionregistrypostprocessor\" title=\"BeanDefinitionRegistryPostProcessor\"></a></h1><h2 id=\"接口-1\">接口<a href=\"#接口-1\" title=\"接口\"></a></h2><p>BeanDefinitionRegistryPostProcessor接口继承自BeanFactoryPostProcessor。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBeanDefinitionRegistrarPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanDefinitionRegistryPostProcessor</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanDefinitionRegistry</span><span class=\"params\">(BeanDefinitionRegistry registry)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"meta\">@Override</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanFactory</span><span class=\"params\">(ConfigurableListableBeanFactory beanFactory)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用时机-1\">调用时机<a href=\"#调用时机-1\" title=\"调用时机\"></a></h2><ul><li><p>postProcessBeanFactory就是BeanFactoryPostProcessor调用的时机。</p>\n</li>\n<li><p>postProcessBeanDefinitionRegistry在所有BeanDefinition即将被加载前调用。</p>\n</li>\n</ul><h2 id=\"作用-1\">作用<a href=\"#作用-1\" title=\"作用\"></a></h2><p>可以在使用BeanDefinitionRegistry向容器中注册BeanDefinition，从而来添加组件。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">registry.registerBeanDefinition();</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"应用-1\">应用<a href=\"#应用-1\" title=\"应用\"></a></h2><p>在mybatis-spring整合包中，我们通常会配置MapperScannerConfigurer来扫描mapper包，做动态代理开发。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> <span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.mybatis.spring.mapper.MapperScannerConfigurer\"</span>&gt;</span></span><br><span class=\"line\">     <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"basePackage\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"cn.edu.njust.dao\"</span>&gt;</span><span class=\"tag\">&lt;/<span class=\"name\">property</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n\n<p>之所以我们不用手动调用<code>sqlSession.getMapper</code>来手动获取mapper，而是直接使用Spring来获取mapper接口的，有两个原因</p>\n<p><strong>MapperFactoryBean</strong></p>\n<p>整合包中实现了这个FactoryBean，用来为我们生成代理。本质上就是<code>sqlSession.getMapper</code></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">getObject</span><span class=\"params\">()</span> <span class=\"keyword\">throws</span> Exception </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> getSqlSession().getMapper(<span class=\"keyword\">this</span>.mapperInterface);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>MapperScannerConfigurer</strong></p>\n<p>这个类实现了BeanDefinitionRegistryPostProcessor接口，在postProcessBeanDefinitionRegistry方法中使用了ClassPathMapperScanner的scan方法进行扫描。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">postProcessBeanDefinitionRegistry</span><span class=\"params\">(BeanDefinitionRegistry registry)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.processPropertyPlaceHolders) &#123;</span><br><span class=\"line\">        processPropertyPlaceHolders();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// *********************************************************************</span></span><br><span class=\"line\">    ClassPathMapperScanner scanner = <span class=\"keyword\">new</span> ClassPathMapperScanner(registry);</span><br><span class=\"line\">    <span class=\"comment\">// *********************************************************************</span></span><br><span class=\"line\">    scanner.setAddToConfig(<span class=\"keyword\">this</span>.addToConfig);</span><br><span class=\"line\">    scanner.setAnnotationClass(<span class=\"keyword\">this</span>.annotationClass);</span><br><span class=\"line\">    scanner.setMarkerInterface(<span class=\"keyword\">this</span>.markerInterface);</span><br><span class=\"line\">    scanner.setSqlSessionFactory(<span class=\"keyword\">this</span>.sqlSessionFactory);</span><br><span class=\"line\">    scanner.setSqlSessionTemplate(<span class=\"keyword\">this</span>.sqlSessionTemplate);</span><br><span class=\"line\">    scanner.setSqlSessionFactoryBeanName(<span class=\"keyword\">this</span>.sqlSessionFactoryBeanName);</span><br><span class=\"line\">    scanner.setSqlSessionTemplateBeanName(<span class=\"keyword\">this</span>.sqlSessionTemplateBeanName);</span><br><span class=\"line\">    scanner.setResourceLoader(<span class=\"keyword\">this</span>.applicationContext);</span><br><span class=\"line\">    scanner.setBeanNameGenerator(<span class=\"keyword\">this</span>.nameGenerator);</span><br><span class=\"line\">    scanner.setMapperFactoryBeanClass(<span class=\"keyword\">this</span>.mapperFactoryBeanClass);</span><br><span class=\"line\">    <span class=\"keyword\">if</span> (StringUtils.hasText(lazyInitialization)) &#123;</span><br><span class=\"line\">        scanner.setLazyInitialization(Boolean.valueOf(lazyInitialization));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    scanner.registerFilters();</span><br><span class=\"line\">    <span class=\"comment\">// *********************************************************************</span></span><br><span class=\"line\">    scanner.scan(</span><br><span class=\"line\">        StringUtils.tokenizeToStringArray(<span class=\"keyword\">this</span>.basePackage, ConfigurableApplicationContext.CONFIG_LOCATION_DELIMITERS));</span><br><span class=\"line\">    <span class=\"comment\">// *********************************************************************</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>scan调用了doScan，它先调用了父类的doScan扫描并注册了mapper接口的BeanDefinition，然后在processBeanDefinitions里修改了BeanDefinition的BeanClass，将其设置为<strong>MapperFactoryBean，这使得我们使用Spring获取接口时，实际上是调用了MapperFactoryBean的getObject方法，生成了动态代理。</strong></p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> Set&lt;BeanDefinitionHolder&gt; <span class=\"title\">doScan</span><span class=\"params\">(String... basePackages)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">// *********************************************************************</span></span><br><span class=\"line\">    Set&lt;BeanDefinitionHolder&gt; beanDefinitions = <span class=\"keyword\">super</span>.doScan(basePackages);</span><br><span class=\"line\">    <span class=\"comment\">// *********************************************************************</span></span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span> (beanDefinitions.isEmpty()) &#123;</span><br><span class=\"line\">        LOGGER.warn(() -&gt; <span class=\"string\">\"No MyBatis mapper was found in '\"</span> + Arrays.toString(basePackages)</span><br><span class=\"line\">                    + <span class=\"string\">\"' package. Please check your configuration.\"</span>);</span><br><span class=\"line\">    &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">    <span class=\"comment\">// *********************************************************************</span></span><br><span class=\"line\">        processBeanDefinitions(beanDefinitions);</span><br><span class=\"line\">    <span class=\"comment\">// *********************************************************************</span></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">return</span> beanDefinitions;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">processBeanDefinitions</span><span class=\"params\">(Set&lt;BeanDefinitionHolder&gt; beanDefinitions)</span> </span>&#123;</span><br><span class=\"line\">    GenericBeanDefinition definition;</span><br><span class=\"line\">    <span class=\"keyword\">for</span> (BeanDefinitionHolder holder : beanDefinitions) &#123;</span><br><span class=\"line\">        definition = (GenericBeanDefinition) holder.getBeanDefinition();</span><br><span class=\"line\">        String beanClassName = definition.getBeanClassName();</span><br><span class=\"line\">        LOGGER.debug(() -&gt; <span class=\"string\">\"Creating MapperFactoryBean with name '\"</span> + holder.getBeanName() + <span class=\"string\">\"' and '\"</span> + beanClassName</span><br><span class=\"line\">                     + <span class=\"string\">\"' mapperInterface\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">// the mapper interface is the original class of the bean</span></span><br><span class=\"line\">        <span class=\"comment\">// but, the actual class of the bean is MapperFactoryBean</span></span><br><span class=\"line\">        definition.getConstructorArgumentValues().addGenericArgumentValue(beanClassName); <span class=\"comment\">// issue #59</span></span><br><span class=\"line\">    <span class=\"comment\">// *********************************************************************</span></span><br><span class=\"line\">        definition.setBeanClass(<span class=\"keyword\">this</span>.mapperFactoryBeanClass);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">        definition.getPropertyValues().add(<span class=\"string\">\"addToConfig\"</span>, <span class=\"keyword\">this</span>.addToConfig);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">boolean</span> explicitFactoryUsed = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.sqlSessionFactoryBeanName)) &#123;</span><br><span class=\"line\">            definition.getPropertyValues().add(<span class=\"string\">\"sqlSessionFactory\"</span>,</span><br><span class=\"line\">                                               <span class=\"keyword\">new</span> RuntimeBeanReference(<span class=\"keyword\">this</span>.sqlSessionFactoryBeanName));</span><br><span class=\"line\">            explicitFactoryUsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sqlSessionFactory != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            definition.getPropertyValues().add(<span class=\"string\">\"sqlSessionFactory\"</span>, <span class=\"keyword\">this</span>.sqlSessionFactory);</span><br><span class=\"line\">            explicitFactoryUsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (StringUtils.hasText(<span class=\"keyword\">this</span>.sqlSessionTemplateBeanName)) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (explicitFactoryUsed) &#123;</span><br><span class=\"line\">                LOGGER.warn(</span><br><span class=\"line\">                    () -&gt; <span class=\"string\">\"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            definition.getPropertyValues().add(<span class=\"string\">\"sqlSessionTemplate\"</span>,</span><br><span class=\"line\">                                               <span class=\"keyword\">new</span> RuntimeBeanReference(<span class=\"keyword\">this</span>.sqlSessionTemplateBeanName));</span><br><span class=\"line\">            explicitFactoryUsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (<span class=\"keyword\">this</span>.sqlSessionTemplate != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (explicitFactoryUsed) &#123;</span><br><span class=\"line\">                LOGGER.warn(</span><br><span class=\"line\">                    () -&gt; <span class=\"string\">\"Cannot use both: sqlSessionTemplate and sqlSessionFactory together. sqlSessionFactory is ignored.\"</span>);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            definition.getPropertyValues().add(<span class=\"string\">\"sqlSessionTemplate\"</span>, <span class=\"keyword\">this</span>.sqlSessionTemplate);</span><br><span class=\"line\">            explicitFactoryUsed = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (!explicitFactoryUsed) &#123;</span><br><span class=\"line\">            LOGGER.debug(() -&gt; <span class=\"string\">\"Enabling autowire by type for MapperFactoryBean with name '\"</span> + holder.getBeanName() + <span class=\"string\">\"'.\"</span>);</span><br><span class=\"line\">            definition.setAutowireMode(AbstractBeanDefinition.AUTOWIRE_BY_TYPE);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        definition.setLazyInit(lazyInitialization);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"beanpostprocessor\">BeanPostProcessor<a href=\"#beanpostprocessor\" title=\"BeanPostProcessor\"></a></h1><h2 id=\"接口-2\">接口<a href=\"#接口-2\" title=\"接口\"></a></h2><p>BeanPostProcessor</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyBeanPostProcessor</span> <span class=\"keyword\">implements</span> <span class=\"title\">BeanPostProcessor</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessBeforeInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> Object <span class=\"title\">postProcessAfterInitialization</span><span class=\"params\">(Object bean, String beanName)</span> <span class=\"keyword\">throws</span> BeansException </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> bean;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"调用时机-2\">调用时机<a href=\"#调用时机-2\" title=\"调用时机\"></a></h2><ul><li>postProcessBeforeInitialization在Bean调用任何初始化方法之前</li>\n<li>postProcessAfterInitialization在Bean调用初始化方法之后</li>\n</ul><h2 id=\"作用-2\">作用<a href=\"#作用-2\" title=\"作用\"></a></h2><ul><li>对Bean进行修改</li>\n<li>生成Bean的代理对象返回</li>\n</ul><h2 id=\"应用-2\">应用<a href=\"#应用-2\" title=\"应用\"></a></h2><p>AOP使用BeanPostProcessor生成代理Bean。</p>\n<h1 id=\"instantiationawarebeanpostprocessor\">InstantiationAwareBeanPostProcessor<a href=\"#instantiationawarebeanpostprocessor\" title=\"InstantiationAwareBeanPostProcessor\"></a></h1><h1 id=\"applicationlistener\">ApplicationListener<a href=\"#applicationlistener\" title=\"ApplicationListener\"></a></h1><h1 id=\"methodinvokingbean\">MethodInvokingBean<a href=\"#methodinvokingbean\" title=\"MethodInvokingBean\"></a></h1>","prev":{"title":"Docker之容器","link":"post/Docker/Docker之容器"},"next":{"title":"8-Spring之纯注解开发","link":"post/Java/Spring/8-Spring之纯注解开发"},"plink":"https://beginc.github.io/post/Java/Spring/9-Spring之扩展/","toc":[{"id":"beanfactorypostprocessor","title":"BeanFactoryPostProcessor","index":"1","children":[{"id":"接口","title":"接口","index":"1.1"},{"id":"调用时机","title":"调用时机","index":"1.2"},{"id":"作用","title":"作用","index":"1.3"},{"id":"应用","title":"应用","index":"1.4"}]},{"id":"beandefinitionregistrypostprocessor","title":"BeanDefinitionRegistryPostProcessor","index":"2","children":[{"id":"接口-1","title":"接口","index":"2.1"},{"id":"调用时机-1","title":"调用时机","index":"2.2"},{"id":"作用-1","title":"作用","index":"2.3"},{"id":"应用-1","title":"应用","index":"2.4"}]},{"id":"beanpostprocessor","title":"BeanPostProcessor","index":"3","children":[{"id":"接口-2","title":"接口","index":"3.1"},{"id":"调用时机-2","title":"调用时机","index":"3.2"},{"id":"作用-2","title":"作用","index":"3.3"},{"id":"应用-2","title":"应用","index":"3.4"}]},{"id":"instantiationawarebeanpostprocessor","title":"InstantiationAwareBeanPostProcessor","index":"4"},{"id":"applicationlistener","title":"ApplicationListener","index":"5"},{"id":"methodinvokingbean","title":"MethodInvokingBean","index":"6"}]}