{"title":"12-Spring之AOP原理","date":"2020-03-03T02:24:27.000Z","date_formatted":{"ll":"Mar 3, 2020","L":"03/03/2020","MM-DD":"03-03"},"thumbnail":"post/Java/Spring/12-Spring之AOP原理/cover.png","link":"post/Java/Spring/12-Spring之AOP原理","categories":["Java","Spring"],"updated":"2020-03-03T05:44:01.048Z","content":"<h1 id=\"aop注解\">AOP注解<a href=\"#aop注解\" title=\"AOP注解\"></a></h1><p>注解开发时由@EnableAspectJAutoProxy启动AOP功能，由此注解开始研究。</p>\n<figure class=\"highlight\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">@EnableAspectJAutoProxy</span></span><br><span class=\"line\"><span class=\"meta\">@Configuration</span></span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">MyConfig</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"aop原理\">AOP原理<a href=\"#aop原理\" title=\"AOP原理\"></a></h1><ol><li>导入AspectJAutoProxyRegistrar这个组件</li>\n</ol><img src=\"/post/Java/Spring/12-Spring%E4%B9%8BAOP%E5%8E%9F%E7%90%86/image-20200303131051420.png\" class=\"\">\n\n<ol><li>AspectJAutoProxyRegistrar实现了ImportBeanDefinitionRegistrar，向容器中注册了AspectJAnnotationAutoProxyCreator</li>\n</ol><img src=\"/post/Java/Spring/12-Spring%E4%B9%8BAOP%E5%8E%9F%E7%90%86/image-20200303131318974.png\" class=\"\">\n\n<ol><li>若容器中无name为org.springframework.aop.config.internalAutoProxyCreator的Bean则注册AnnotationAwareAspectJAutoProxyCreator的BeanDefinition</li>\n</ol><img src=\"/post/Java/Spring/12-Spring%E4%B9%8BAOP%E5%8E%9F%E7%90%86/image-20200303131639885.png\" class=\"\">\n\n<img src=\"/post/Java/Spring/12-Spring%E4%B9%8BAOP%E5%8E%9F%E7%90%86/image-20200303131738728.png\" class=\"\">\n\n<ol><li>查看AnnotationAwareAspectJAutoProxyCreator的继承关系，发现它是InstantiationAwareBeanPostProcessor的实现类，重点关注该接口的方法。</li>\n</ol><img src=\"/post/Java/Spring/12-Spring%E4%B9%8BAOP%E5%8E%9F%E7%90%86/image-20200303131923809.png\" class=\"\">\n\n<ol><li>调试发现最后进入父类AbstractAutoProxyCreator的postProcessAfterInitialization方法，此处准备创建代理对象。</li>\n</ol><img src=\"/post/Java/Spring/12-Spring%E4%B9%8BAOP%E5%8E%9F%E7%90%86/image-20200303133529485.png\" class=\"\">\n\n<ol><li>创建代理对象</li>\n</ol><img src=\"/post/Java/Spring/12-Spring%E4%B9%8BAOP%E5%8E%9F%E7%90%86/image-20200303133604100.png\" class=\"\">\n\n<ol><li>选择代理方法</li>\n</ol><img src=\"/post/Java/Spring/12-Spring%E4%B9%8BAOP%E5%8E%9F%E7%90%86/image-20200303133907476.png\" class=\"\">\n\n<p><strong>总结</strong></p>\n<p>一句话就是使用InstantiationAwareBeanPostProcessor在Bean初始化完之后执行postProcessAfterInitialization为其生成了一个动态代理对象。</p>\n","prev":{"title":"Java之动态代理","link":"post/Java/Java语言/Java之动态代理"},"next":{"title":"11-Spring之循环引用","link":"post/Java/Spring/11-Spring之循环引用"},"plink":"https://beginc.github.io/post/Java/Spring/12-Spring之AOP原理/","toc":[{"id":"aop注解","title":"AOP注解","index":"1"},{"id":"aop原理","title":"AOP原理","index":"2"}]}